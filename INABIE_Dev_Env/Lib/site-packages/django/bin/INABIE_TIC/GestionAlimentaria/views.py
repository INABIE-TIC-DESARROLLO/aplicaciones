import json
from django.http import FileResponse, HttpRequest, JsonResponse
from django.shortcuts import redirect, render
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import permission_required
from datetime import datetime, timedelta
from PAE.models import Escuela, LoteEscolar, ConsultaEntregaRaciones, Lotificacion, LoteHeader
from GestionAlimentaria.models import EntregaRaciones
from django.core.mail import send_mail, EmailMessage
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import Table, TableStyle, SimpleDocTemplate, Paragraph
import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.units import cm, inch
from .models import EntregaRaciones





# Create your views here.


def login_gestion_alimentaria(request):

    if request.method == "GET":
        return render(request, "../templates/login_gestion_alimentaria.html", {})
    
    if request.method == "POST":

        try:
            user = request.POST["user"]
            password = request.POST["password"]

            authenticated_user = authenticate(username=user,password=password)
            
            
            if authenticated_user is not None and authenticated_user.last_login is not None:

                login(request, authenticated_user)
                request.session.set_expiry(900) #la sesion expira en 300 segundos = 5 min
                return redirect('/gestion-alimentaria/formulario-entrega-raciones')
            elif authenticated_user is not None and authenticated_user.last_login is None:
                login(request, authenticated_user)
                request.session.set_expiry(900) #la sesion expira en 300 segundos = 5 min
                return redirect('/gestion-alimentaria/formulario-entrega-raciones')
                # return redirect("/cambiar-clave/")
            else:
                return render(request, "../templates/login_gestion_alimentaria.html", {"error": 'Usuario o contraseña incorrectos: por favor, revise si tiene las mayúsculas activadas o si escribió algo mal.'})
        except Exception as error:
            return render(request, "../templates/error_page.html", {"error": error})


@login_required(login_url=login_gestion_alimentaria)
def formulario_entrega_raciones(request):


    if request.method == "GET":
        
        try:

            datos_entrega = [registro for registro in ConsultaEntregaRaciones.objects.using('default').filter(codigo_ce = request.user.username).values()]
           
            return render(request, "../templates/formulario_entrega_raciones.html", {"datos_entrega": datos_entrega, "datos_entrega_consultada": datos_entrega[0]})

        except Exception as e:
            return render(request, "../templates/error_page.html", {"error": f"El usuario logueado de este centro educativo no existe en la base de datos: {e}"})
    

    if request.method == "POST":

        if 'codigo_ce' in request.POST: #para verificar si fue un post por fetch o un post de formulario
            
            try:
                print(request.POST)
                
                entrega_segun_menu = True if request.POST['entrega_segun_menu'] == '1' else False
                fecha_hora_actual = datetime.now()
                
                tipo_incidencia = request.POST["tipo_incidencia"] if request.POST["hubo_incidencia"] == "1" else None
                numero_conduce = len(EntregaRaciones.objects.using("entrega_raciones").filter(cedula_proveedor = request.POST['cedula_rnc_cont'])) + 1 #cuenta la cantidad de conduces generados y le suma uno para asignar esta numero al conduce generado a continuacion

                entrega = EntregaRaciones(
                    fecha_creado = fecha_hora_actual.date(),
                    hora_creado = fecha_hora_actual.time(),
                    numero_conduce = numero_conduce,
                    #datos del centro educativo

                    codigo_ce = request.POST['codigo_ce'],
                    nombre_ce = request.POST['nombre_ce'],
                    provincia_ce = request.POST['provincia_ce'],
                    municipio_ce = request.POST['municipio_ce'],
                    regional_ce = request.POST['regional_ce'],
                    distrito_ce = request.POST['distrito_ce'],
                    sector_ce = request.POST['sector_ce'],
                    direccion_ce = request.POST['direccion_ce'],
                    telefono_ce = request.POST['telefono_ce'],
                    servicio_modalidad = request.POST['modalidad_ce'],
                    tanda_ce = request.POST['tanda_ce'],

                    #datos del director

                    # cedula_director = request.POST['cedula_director'],
                    nombre_director  = request.POST['director_ce'],
                    telefono_director = request.POST['director_telefono_ce'],
                    # email_director = request.POST['email_director'], 

                    #datos del analista de seguimiento

                    # nombre_analista_seguimiento_servicio = request.POST['nombre_analista_seguimiento_servicio'],
                    # cedula_analista_seguimiento_servicio = request.POST['cedula_analista_seguimiento_servicio'],
                    # telefono_analista_seguimiento_servicio = request.POST['telefono_analista_seguimiento_servicio'],
                    # email_analista_seguimiento_servicio = request.POST['email_analista_seguimiento_servicio'],
                    # cargo_analista_seguimiento_servicio = request.POST['cargo_analista_seguimiento_servicio'],

                    #datos del proveedor

                    cedula_proveedor = request.POST['cedula_rnc_cont'],
                    nombre_proveedor = request.POST['nombre_prov'],
                    telefono_proveedor = request.POST['telefono_prov'],
                    email_proveedor = request.POST['email_prov'],

                    #datos de la entrega de raciones

                    # raciones_periodo = request.POST['raciones_periodo'] if request.POST['raciones_periodo'] else None,
                    # raciones_consumidas = request.POST['raciones_consumidas'] if request.POST['raciones_consumidas'] else None,
                    # periodo_escolar = request.POST['periodo_escolar'],
                    # frecuencia_entrega = request.POST['frecuencia_entrega'],
                    raciones_a_recibir = request.POST['raciones_a_recibir'],
                    raciones_recibidas = request.POST['raciones_recibidas'],
                    condicion_raciones = request.POST['condicion_raciones'],
                    entrega_segun_menu = entrega_segun_menu,
                    tipo_producto = request.POST['tipo_producto'],
                    comentario = request.POST['comentario'],

                    tipo_incidencia = tipo_incidencia

                )

                entrega.save(using="entrega_raciones")



                # Create the PDF object, using the buffer as its "file."
                fecha_hora_registrada = f"{fecha_hora_actual.day}-{fecha_hora_actual.month}-{fecha_hora_actual.year}-({fecha_hora_actual.hour}-{fecha_hora_actual.minute}-{fecha_hora_actual.second})"
                carpeta_conduces = "C:/media/"
                ruta_nombre_archivo_pdf = f"{carpeta_conduces}conduce-inabie-{request.POST['nombre_prov']}-{fecha_hora_registrada}.pdf"

                

                pdf = canvas.Canvas(filename = ruta_nombre_archivo_pdf, pagesize = A4)
                

                # Draw things on the PDF. Here's where the PDF generation happens.
                # See the ReportLab documentation for the full list of functionality.

                pdf.drawImage(image= "../INABIE_TIC/static/imagenes/LOGO-MOSCA-02.png" , x = 1 * cm, y = 26 * cm, width = 3 * cm, height= 3 * cm)


                """Encabezado de la pagina, datos del proveedor"""
                pdf.setFont('Helvetica-Bold', 14)
                pdf.drawCentredString(text = request.POST['nombre_prov'], x = A4[0] / 2, y = 27 * cm) #nombre del proveedor

                pdf.setFont('Helvetica-Bold', 12)
                pdf.drawCentredString(text = request.POST['cedula_rnc_cont'], x = A4[0] / 2, y = 26.5 * cm) #cedula o rnc del proveedor
                pdf.drawCentredString(text = request.POST['telefono_prov'], x = A4[0] / 2, y = 26 * cm) #telefono del proveedor

                """Datos del conduce"""
                pdf.setFont('Helvetica-Bold', 12)
                pdf.drawCentredString(text = f"CONDUCE No. {str(numero_conduce)}", x = A4[0] / 1.35, y = 25 * cm)  #numero de conduce

                pdf.setFont('Helvetica', 12)
                pdf.drawCentredString(text = f"FECHA: {fecha_hora_actual.day}/{fecha_hora_actual.month}/{fecha_hora_actual.year}", x = A4[0] / 1.35, y = 24 * cm) #fecha de creacion del conduce



                """Datos del centro educativo"""

                pdf.setFont('Helvetica-Bold', 12)
                pdf.drawString(text = f"Nombre Centro Educativo: {request.POST['nombre_ce']}", x = 1.5 * cm, y = 22 * cm)  #nombre CE

                pdf.setFont('Helvetica', 12)
                pdf.drawString(text = f"Código Centro: {request.POST['codigo_ce']}", x = 1.5 * cm, y = 21 * cm) #codigo CE
                pdf.drawString(text = f"Regional-Distrito: {request.POST['regional_ce']}-{request.POST['distrito_ce']}", x = 7 * cm, y = 21 * cm) #regional y distrito CE
                pdf.drawString(text = f"Teléfono: {request.POST['telefono_ce']}", x = 13 * cm, y = 21 * cm) #Telefono CE
                pdf.drawString(text = f"Dirección: {request.POST['direccion_ce'] if request.POST['direccion_ce'] else 'NO REGISTRADA'}", x = 1.5 * cm, y = 20 * cm) #direccion CE
                pdf.drawString(text = f"Provincia: {request.POST['provincia_ce']}", x = 1.5 * cm, y = 19 * cm) #provincia CE
                pdf.drawString(text = f"Municipio: {request.POST['municipio_ce']}", x = 1.5 * cm, y = 18 * cm) #municipio CE
                pdf.drawString(text = f"Director: {request.POST['director_ce']}", x = 1.5 * cm, y = 17 * cm) #nombre director


                """Datos de la entrega"""
                pdf.setFont('Helvetica-Bold', 14)
                pdf.drawCentredString(text = "Detalle de las raciones entregadas y recibidas", x = A4[0] / 2, y = 16 * cm) 

                p_style = ParagraphStyle("size-font", fontSize = 14)
                p = Paragraph(request.POST['tipo_producto'], p_style) #parrafo de detalle del producto o alimento
                #"Churrasco, ribeye en salsa de champiñones y una entrada de scallops al limón."
                table = Table( #tabla con los datos de entrega de raciones
                    data=[["Descripción del producto entregado", "Cantidad"], [p, request.POST['raciones_recibidas']]],
                    colWidths=( A4[0] / 1.5, 4 * cm), #3/4 para la descripcion y 1/4 para la cantidad
                    rowHeights=None
                    )

                table_style = TableStyle([('BACKGROUND', (0,0), (1, 0), colors.gainsboro), 
                ('FONT', (0,0), (1, 0), 'Helvetica-Bold'), 
                ('FONTSIZE', (0,0), (1, 1), 14),
                ('INNERGRID', (0,0), (1,1), 0.25, colors.black),
                ('BOX', (0,0), (1,1), 0.25, colors.black),
                ('ALIGN',(0, 0),(1, 1),'CENTER'),
                ('VALIGN',(0, 0),(1,1),'MIDDLE') #vertical align
                ]) #nombre de propiedad, celda donde comienza (columna, fila), celda donde termina (columna, fila), valor de la propiedad... si las celdas contiene numero negativo significa que el conteo de filas y columnas es de derecha a izquierda 
                table.setStyle(table_style)

                
                table.wrap(0, 0)
                table.drawOn(pdf, 1.5 * cm, 13 * cm) #dibujar la tabla en el pdf de canvas que tenemos hasta ahora
                
                pdf.drawString(text = "OBSERVACIONES:", x = 1.5 * cm, y = 12 * cm)
                p_style = ParagraphStyle("size-font", fontSize = 12)
                p = Paragraph(request.POST['comentario'] if request.POST['comentario'] else " ", p_style)
                p.wrap(15 * cm, 10 * cm)
                p.drawOn(pdf, 1.5 * cm, 10 * cm)


                """ Detalles de la recepcion """

                pdf.setFont('Helvetica-Bold', 14)
                pdf.drawCentredString(text = "Detalle de la recepción de las raciones", x = A4[0] / 2, y = 7 * cm) 
                pdf.setFont('Helvetica', 12)
                pdf.drawString(text = f"Recibido por (nombre): ", x = 1.5 * cm, y = 6 * cm) #Nombre de quien recibio
                pdf.drawString(text = f"Fecha de recepción: ", x = 1.5 * cm, y = 5 * cm) #Fecha recepcion
                pdf.drawString(text = f"Hora de recepción: ", x = 1.5 * cm, y = 4 * cm) #Hora de recepcion


                pdf.showPage()

                pdf.setTitle(f"conduce-inabie-{request.POST['nombre_prov']}-{fecha_hora_registrada}.pdf")
                pdf.save()



                # email = EmailMessage(
                #     subject = "Nuevo Conduce Generado",
                #     body = f"Luego de saludarle cordialmente, le dejamos el Conduce generado por la última entrega que hizo al centro escolar {request.POST['nombre_ce']}",
                #     to = ["enmanuel.feliz@inabie.gob.do", "ernesto.dejesus@inabie.gob.do", "oscar.pozo@inabie.gob.do"],

                # )


                # email.attach_file(ruta_nombre_archivo_pdf)

                # email.send()
                

                logout(request) 

                return render(request, "../templates/success_page.html", {
                    "subtitle": 'El formulario ha sido enviado correctamente',
                    "success_message": 'La entrega que acaba de recibir fue registrada. El conduce fue enviado por correo al proveedor.'
                    })

                
                # return FileResponse(open(ruta_nombre_archivo_pdf, "rb"), as_attachment=False, filename = f"conduce-inabie-{request.POST['nombre_proveedor']}-{fecha_hora_registrada}.pdf")
                
            

            except Exception as e:
                return render(request, "../templates/error_page.html", {"error": e})
            
        else:
        
            data = json.load(request)

            if "opcion" in data:
                if data['opcion'] == "cambiar-tanda":
                    try:

                        datos_entrega_consultada = ConsultaEntregaRaciones.objects.using('default').filter(codigo_ce = request.user.username, tanda_ce = data['tanda']) #datos de la tanda y alimentos filtrados
                        
                        datos_entrega_consultada = [datos.__dict__ for datos in datos_entrega_consultada]

                        for datos in datos_entrega_consultada:
                            del datos['_state']

                        return JsonResponse({"datos_entrega_consultada": datos_entrega_consultada})

                    except Exception as e:
                        return JsonResponse({"error": f"{e}"})

            else:
                return JsonResponse({"respuesta": "Hubo un error"})

@permission_required('GestionAlimentaria.add_entregaraciones')
def formulario_entrega_raciones_interno(request):

    fecha_actual = datetime.strftime(datetime.now().date(), "%Y-%m-%d") 
    fecha_ayer = datetime.strftime(datetime.now().date() - timedelta(1), "%Y-%m-%d") 

    if request.method == "GET":
        
        return render(request, "../templates/formulario_entrega_raciones_interno.html", {"fecha_ayer": fecha_ayer, "fecha_actual": fecha_actual})
    
    if request.method == "POST":

        if "buscar" in request.POST:

            try:

                datos_entrega = [registro for registro in ConsultaEntregaRaciones.objects.using('default').filter(codigo_ce = request.POST['codigo_ce']).values()]
            
                return render(request, "../templates/formulario_entrega_raciones_interno.html", {"datos_entrega": datos_entrega, "datos_entrega_consultada": datos_entrega[0], "fecha_ayer": fecha_ayer, "fecha_actual": fecha_actual})

            except Exception as e:
                mensaje = f"El Centro Educativo buscado no existe. Verificar el código."
                color_fondo_mensaje = 'bg-danger'

                return render(request, "../templates/formulario_entrega_raciones_interno.html", {"mensaje_retroalimentacion": mensaje, "bg_color_message": color_fondo_mensaje, "fecha_ayer": fecha_ayer, "fecha_actual": fecha_actual})


        elif "guardar" in request.POST:

            try:

                entrega_segun_menu = True if request.POST['entrega_segun_menu'] == '1' else False
                # print(datetime.strptime(request.POST["fecha_hora_entrega"], '%d-%m-%Y %H:%M:%S'))

                tipo_incidencia = request.POST["tipo_incidencia"] if request.POST["hubo_incidencia"] == "1" else None

                entrega = EntregaRaciones(

                    hora_creado = request.POST['hora_entrega'],
                    fecha_creado = request.POST['fecha_entrega'],
                    # numero_conduce = None,
                    #datos del centro educativo

                    codigo_ce = request.POST['codigo_ce'],
                    nombre_ce = request.POST['nombre_ce'],
                    # provincia_ce = request.POST['provincia_ce'],
                    # municipio_ce = request.POST['municipio_ce'],
                    # regional_ce = request.POST['regional_ce'],
                    # distrito_ce = request.POST['distrito_ce'],
                    # sector_ce = request.POST['sector_ce'],
                    # direccion_ce = request.POST['direccion_ce'],
                    # telefono_ce = request.POST['telefono_ce'],
                    # servicio_modalidad = request.POST['servicio_modalidad'],
                    # tanda_ce = request.POST['tanda_ce'],

                    #datos del director

                    # cedula_director = request.POST['cedula_director'],
                    nombre_director  = request.POST['director_ce'],
                    telefono_director = request.POST['director_telefono_ce'],
                    # email_director = request.POST['email_director'], 

                    #datos del analista de seguimiento

                    # nombre_analista_seguimiento_servicio = request.POST['nombre_analista_seguimiento_servicio'],
                    # cedula_analista_seguimiento_servicio = request.POST['cedula_analista_seguimiento_servicio'],
                    # telefono_analista_seguimiento_servicio = request.POST['telefono_analista_seguimiento_servicio'],
                    # email_analista_seguimiento_servicio = request.POST['email_analista_seguimiento_servicio'],
                    # cargo_analista_seguimiento_servicio = request.POST['cargo_analista_seguimiento_servicio'],

                    #datos del proveedor

                    # cedula_proveedor = request.POST['cedula_proveedor'],
                    nombre_proveedor = request.POST['nombre_proveedor'],
                    # telefono_proveedor = request.POST['telefono_proveedor'],
                    # email_proveedor = request.POST['email_proveedor'],

                    #datos de la entrega de raciones

                    # raciones_periodo = request.POST['raciones_periodo'] if request.POST['raciones_periodo'] else None,
                    # raciones_consumidas = request.POST['raciones_consumidas'] if request.POST['raciones_consumidas'] else None,
                    # periodo_escolar = request.POST['periodo_escolar'],
                    # frecuencia_entrega = request.POST['frecuencia_entrega'],
                    raciones_a_recibir = request.POST['raciones_a_recibir'],
                    raciones_recibidas = request.POST['raciones_recibidas'],
                    condicion_raciones = request.POST['condicion_raciones'],
                    entrega_segun_menu = entrega_segun_menu,
                    tipo_producto = request.POST['tipo_producto'],
                    comentario = request.POST['comentario'],

                    tipo_incidencia = tipo_incidencia

                )

                entrega.save(using="entrega_raciones")

                mensaje = f"Se ha registrado la entrega de [{request.POST['tipo_producto']}] para el centro: {request.POST['codigo_ce']} - {request.POST['nombre_ce']}"
                color_fondo_mensaje = 'bg-success'

                return render(request, "../templates/formulario_entrega_raciones_interno.html", {"mensaje_retroalimentacion": mensaje, "bg_color_message": color_fondo_mensaje, "fecha_ayer": fecha_ayer, "fecha_actual": fecha_actual})
            
            except Exception as e:
                mensaje = f"No se pudo registrar la entrega. Detalles técnicos: {e}"
                color_fondo_mensaje = 'bg-danger'

                return render(request, "../templates/formulario_entrega_raciones_interno.html", {"mensaje_retroalimentacion": mensaje, "bg_color_message": color_fondo_mensaje, "fecha_ayer": fecha_ayer, "fecha_actual": fecha_actual})

@login_required(login_url=login_gestion_alimentaria)
def cambiar_clave(request):

    if request.method == "GET":
        return render(request, "../templates/change_password.html", {"error": ''})
    if request.method == "POST":
        new_password = request.POST["new_password"]
        new_password_confirmation = request.POST["new_password_confirmation"]


        if new_password != new_password_confirmation:
            return render(request, "../templates/change_password.html", {"error": 'La contraseña debe ser igual en ambos campos'})
        else:
            request.user.set_password(new_password_confirmation)
            request.user.save()
            logout(request)
            return redirect("/gestion-alimentaria/formulario-entrega-raciones")
            
@login_required(login_url=login_gestion_alimentaria)         
def consulta_conduces(request):

    if request.method == "GET":

        try:
            entrega_raciones = EntregaRaciones.objects.using('entrega_raciones').all()
            return render(request, "../templates/consulta_conduces.html", {"entrega_raciones": entrega_raciones})

        except Exception as e:
            return render(request, "../templates/error_page.html", {"error": e})



def logout_view_GA(request):
    logout(request) 
    return redirect('/gestion-alimentaria/login-gestion-alimentaria') 

@login_required()
def modificacion_raciones_lote(request):

    lote_header = LoteHeader.objects.all()
    lotes = Lotificacion.objects.all()

    if request.method == "GET":
        return render(request, "../templates/modificacion_raciones_lote.html", {"lote_header": lote_header, "lotes": lotes,})
    elif request.method == "POST":


        if "buscar" in request.POST:
            lote_escogido = request.POST['numero-lote']
            proceso_escogido = request.POST['nombre-proceso']

            try:
                escuelas = Lotificacion.objects.filter(proceso_no = request.POST["nombre-proceso"], lote_no = request.POST["numero-lote"]) 

                if len(escuelas) == 0:
                    raise Exception
                else:
                    return render(request, "../templates/modificacion_raciones_lote.html", {"lote_header": lote_header, "lotes": lotes, "lote": lote_escogido, "proceso": proceso_escogido, "escuelas_del_lote": escuelas})

            except Exception as error:
                request.session['message'] = f"El proceso o lote no existe. Detalles: {error}"
                return redirect('/error')

            
        elif "guardar" in request.POST: #guardar cambio de raciones totales del centro perteneciente al proceso y lote especificado

            
            try:
                lote =  Lotificacion.objects.get(centro_codigo = request.POST["codigo_centro_escolar"].strip(), proceso_no = request.POST["proceso_no"], lote_no = request.POST["lote_no"])
                lote.raciones_diarias_total =  request.POST["cantidad_raciones_total"]
                lote.save(update_fields=["raciones_diarias_total"])

                lote_escogido = request.POST['lote_no']
                proceso_escogido = request.POST['proceso_no']
                escuelas = Lotificacion.objects.filter(proceso_no = request.POST["proceso_no"], lote_no = request.POST["lote_no"]) 
                return render(request, "../templates/modificacion_raciones_lote.html", {"lote_header": lote_header, "lotes": lotes, "lote": lote_escogido, "proceso": proceso_escogido, "escuelas_del_lote": escuelas})
            except Exception as error:
                request.session['message'] = f"No se pudo encontrar el centro educativo especificado. Detalles: {error}"
                return redirect('/error')
                
            
