from django.db import models
from datetime import datetime
from django.core.validators import MinLengthValidator
from django.core.exceptions import ValidationError

# Create your models here.

class Turno(models.Model):

    pk_id = models.AutoField(primary_key=True, verbose_name="ID_BBDD")
    numero = models.IntegerField("Numero", default=1)
    fecha_registro = models.DateField("Fecha de registro", auto_now=True)
    hora_registro = models.TimeField("Hora de registro", auto_now=True)
    fecha_finalizado = models.DateField("Fecha finalizado", null=True, blank=True)
    hora_finalizado = models.TimeField("Hora finalizado", null=True, blank=True)
    duracion_servicio = models.IntegerField("Duracion del servicio (min)", null=True, blank=True)
    tiempo_en_espera = models.IntegerField("Tiempo en espera (min)", null=True, blank=True)
    persona_atendida = models.ForeignKey("PersonaAtendida", verbose_name= "Cedula/Nombre Persona Atendida", on_delete=models.CASCADE, related_name="+") #persona a quien se le dara el servicio
    persona_representante_turno = models.ForeignKey("PersonaAtendida", verbose_name= "Cedula/Nombre Persona Representante Turno", on_delete=models.CASCADE, related_name="+", null=True, blank=True) #persona que lleva en su posesion el turno
    motivo_solicitud_servicio = models.TextField("Motivo de solicitud de servicio", validators=[MinLengthValidator(15, "El motivo fue muy corto, debe tener al menos 15 caracteres.")])
    direccion_servicio = models.ForeignKey("AdministracionSistema.Direccion", verbose_name="Direccion", on_delete=models.CASCADE, null=True, blank=True)
    departamento_servicio = models.ForeignKey("AdministracionSistema.Departamento", verbose_name="Departamento u Oficina", on_delete=models.CASCADE, null=True, blank=True)
    division_departamento_servicio = models.ForeignKey("AdministracionSistema.Division", verbose_name="Division o Sección", on_delete=models.CASCADE, null=True, blank=True)
    usuario_ejecutor_del_servicio = models.CharField("Usuario ejecutor del servicio", max_length=255, null=True, blank=True)
    codigo = models.CharField("Codigo", max_length=50, default='')
    preferencial = models.BooleanField("Preferencial", default=False)
    estado = models.CharField("Estado", max_length=50, default="EN ESPERA", choices=[("EN ESPERA", "EN ESPERA"), ("ATENDIENDO", "ATENDIENDO"), ("ATENDIDO", "ATENDIDO"), ("DESCARTADO", "DESCARTADO")])
    estado_solucion = models.CharField("Estado de solución", max_length=50, choices=[("RESUELTO", "RESUELTO"), ("NO RESUELTO", "NO RESUELTO"), ("INCOMPLETO", "INCOMPLETO")], default="INCOMPLETO")
    comentarios = models.TextField("Comentarios", validators=[MinLengthValidator(15, "El comentario fue muy corto, debe tener al menos 15 caracteres.")], null=True, blank=True)
    comentario_departamental = models.TextField("Comentario departamental", validators=[MinLengthValidator(15, "El comentario fue muy corto, debe tener al menos 15 caracteres.")], null=True, blank=True)

    numero_posicion = models.IntegerField("Numero Posicion", null=True, blank=True) #posicion de la ventanilla o cubiculo donde sera atendido el ciudadano

    creado_por =  models.CharField("Creado por", max_length=255, null=True, blank=True)

    def save(self, *args, **kwargs):

        if self.persona_representante_turno is None:
            self.persona_representante_turno = self.persona_atendida

        if self.pk_id is not None: #para no crear codigo en caso de modificacion y no guardado

            return super().save(*args, **kwargs)
            

        else:

            fecha_hoy = datetime.now().date()

            if self.preferencial:
                if self.departamento_servicio and self.division_departamento_servicio:
                    letras_codigo = 'P-' + self.departamento_servicio.nombre[0:3].upper() + '-' + self.division_departamento_servicio.nombre[0:3].upper()
                    ultimo_turno_preferencial = Turno.objects.filter(departamento_servicio = self.departamento_servicio, division_departamento_servicio = self.division_departamento_servicio, preferencial = True, fecha_registro = fecha_hoy).last()
                elif self.departamento_servicio:
                    letras_codigo = 'P-' + self.departamento_servicio.direccion_perteneciente.nombre[0:3].upper() + '-' + self.departamento_servicio.nombre[0:3].upper()
                    ultimo_turno_preferencial = Turno.objects.filter(departamento_servicio = self.departamento_servicio, preferencial = True, fecha_registro = fecha_hoy).last()
                else:
                    letras_codigo = 'P-' + self.division_departamento_servicio.direccion_perteneciente.nombre[0:3].upper() + '-' + self.division_departamento_servicio.nombre[0:3].upper()
                    ultimo_turno_preferencial = Turno.objects.filter(division_departamento_servicio = self.division_departamento_servicio, preferencial = True, fecha_registro = fecha_hoy).last()

            else:
                if self.departamento_servicio and self.division_departamento_servicio:
                    letras_codigo = self.departamento_servicio.nombre[0:3].upper() + '-' + self.division_departamento_servicio.nombre[0:3].upper()
                    #para poder atender mejor los turnos en orden de llega es mejor dividir en dos grupos diferentes los normales de los preferenciales
                    ultimo_turno = Turno.objects.filter(departamento_servicio = self.departamento_servicio, division_departamento_servicio = self.division_departamento_servicio, fecha_registro = fecha_hoy, preferencial = False).last() #ultimo turno asociado al tipo de codigo por departamento y division
                    
                elif self.departamento_servicio:
                    letras_codigo = self.departamento_servicio.direccion_perteneciente.nombre[0:3].upper() + '-' + self.departamento_servicio.nombre[0:3].upper()
                    ultimo_turno = Turno.objects.filter(departamento_servicio = self.departamento_servicio, fecha_registro = fecha_hoy, preferencial = False).last() #ultimo turno asociado al tipo de codigo por departamento y division
                    
                else:
                    letras_codigo = self.division_departamento_servicio.direccion_perteneciente.nombre[0:3].upper() + '-' + self.division_departamento_servicio.nombre[0:3].upper()
                    ultimo_turno = Turno.objects.filter(division_departamento_servicio = self.division_departamento_servicio, fecha_registro = fecha_hoy, preferencial = False).last() #ultimo turno asociado al tipo de codigo por departamento y division
                    
                

            
            

            if self.preferencial:
                ultimo_turno_elegido = ultimo_turno_preferencial

            else:
                ultimo_turno_elegido = ultimo_turno

            if ultimo_turno_elegido: #para asegurarnos que al menos hay un turno

                self.numero = ultimo_turno_elegido.numero + 1 #cada nuevo dia el numero de conteo del codigo debe empezar en 1, si la fecha es la del mismo dia, aumenta en uno el conteo
                self.codigo = letras_codigo + '-' + str(self.numero)


            else:
                self.codigo = letras_codigo + '-' + str(1)



            return super().save(*args, **kwargs)

    class Meta:
       permissions = [
           ("marcar_como_atendido", "Solo marcar como atendido", )
       ]


    # def __str__(self):
    #     return self.codigo + ' ' + self.persona_atendida.cedula_rnc + ' ' + self.persona_atendida.nombre
        
    


class PersonaAtendida(models.Model):
    cedula_rnc = models.CharField("Cedula o RNC", max_length=20, primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    relacion_con_INABIE = models.CharField("Relacion con el INABIE", max_length=255)
    numero_telefono = models.CharField("Numero de telefono", max_length=50)
    tipo_persona = models.CharField("Tipo de persona", max_length=75)

    def __str__(self):
        return self.cedula_rnc + ' ' + self.nombre
    
    
