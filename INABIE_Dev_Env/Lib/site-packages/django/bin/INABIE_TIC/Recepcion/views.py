
from django.http import FileResponse
from django.shortcuts import redirect, render
from .models import Turno
from datetime import datetime
from RecursosHumanos.models import Empleado
from datetime import datetime
from .models import PersonaAtendida
from AdministracionSistema.models import Departamento, Division, Direccion
from django.contrib.auth.decorators import login_required
from django.core import serializers
from fpdf import FPDF
from itertools import chain

class PDF(FPDF):
    
    pass
# Create your views here.

def panelPrincipal(request):

    return render(request, './panel_administracion/panel_principal.html')

def turnos(request):

    if request.method == 'GET':
        return render(request, './turnos/eleccion_piso.html', {})   

    if request.method == 'POST':
        turnos_siendo_atendidos_departamentos = Turno.objects.filter(estado = "ATENDIENDO", fecha_registro = datetime.now().date(), departamento_servicio__piso = request.POST['piso']) #los turnos siendo atendidos por departamentos
        turnos_siendo_atendidos_divisiones = Turno.objects.filter(estado = "ATENDIENDO", fecha_registro = datetime.now().date(), division_departamento_servicio__piso = request.POST['piso']) #los turnos siendo atendidos por division

        turnos_en_espera_departamentos = Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio__piso = request.POST['piso']) #los turnos en espera por departamentos
        turnos_en_espera_divisiones = Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), division_departamento_servicio__piso = request.POST['piso']) #los turnos en espera por divisiones

        turnos_en_espera = list(chain(turnos_en_espera_departamentos, turnos_en_espera_divisiones)) #chain hace una fusion de los iterables que se pongan como parametros
        turnos_siendo_atendidos = list(chain(turnos_siendo_atendidos_departamentos, turnos_siendo_atendidos_divisiones))

        return render(request, './turnos/turnos.html', {"turnos_siendo_atendidos": turnos_siendo_atendidos, "turnos_en_espera": turnos_en_espera, "piso": request.POST['piso']})   

@login_required
def administracion_turnos_recepcion(request):

    if not request.user.groups.filter(name = "creacion-de-turnos").exists():#si no esta en el grupo de creacion de turnos tiene acceso restringido
        return redirect('/acceso-restringido')
    else:
        day = datetime.now().day
        month = datetime.now().month
        year = datetime.now().year
        date = f"{day}/{month}/{year}"

        personas_atendidas = PersonaAtendida.objects.all()
        departamentos = [departamento for departamento in Departamento.objects.filter(habilitado_para_turnos = True).values()] #serializers.serialize('json', Departamento.objects.all(), use_natural_foreign_keys=True, use_natural_primary_keys=True) 
        divisiones = [division for division in Division.objects.filter(habilitado_para_turnos = True).values()] #serializers.serialize('json', Division.objects.all(), use_natural_foreign_keys=True, use_natural_primary_keys=True) 
        direcciones = [direccion for direccion in Direccion.objects.all().values()]

        turnos_de_hoy = Turno.objects.filter(fecha_registro = datetime.now().date()).order_by('-hora_registro')
        turnos_en_espera = Turno.objects.filter(fecha_registro = datetime.now().date(), estado = "EN ESPERA").order_by('-hora_registro')
        turnos_siendo_atendidos = Turno.objects.filter(fecha_registro = datetime.now().date(), estado = "ATENDIENDO").order_by('-hora_registro')
        turnos_atendidos = Turno.objects.filter(fecha_registro = datetime.now().date(), estado = "ATENDIDO").order_by('-hora_registro')
        turnos_de_hoy_json = [turno for turno in Turno.objects.filter(fecha_registro = datetime.now().date()).order_by('-hora_registro').values(
            "pk_id", 
            "numero", 
            "fecha_registro", 
            "hora_registro", 
            "fecha_finalizado", 
            "hora_finalizado", 
            "duracion_servicio",
            "tiempo_en_espera",
            "persona_atendida__nombre",
            "motivo_solicitud_servicio",
            "departamento_servicio__nombre", 
            "division_departamento_servicio__nombre",
            "usuario_ejecutor_del_servicio",
            "codigo",
            "preferencial",
            "estado",
            "estado_solucion",
            "comentarios"
        )]

        if request.method == 'GET':
            return render(request, './administracion_turnos/registro_turnos.html', {'fecha': date, 'personas_atendidas': personas_atendidas, 'direcciones': direcciones, 'departamentos': departamentos, 'divisiones': divisiones, 'turnos_de_hoy': turnos_de_hoy, 'turnos_de_hoy_json': turnos_de_hoy_json, "turnos_en_espera": turnos_en_espera, "turnos_siendo_atendidos": turnos_siendo_atendidos, "turnos_atendidos": turnos_atendidos})   
        elif request.method == 'POST':

            if 'agregar-nueva-persona' in request.POST:
                nueva_persona = PersonaAtendida(
                    cedula_rnc = request.POST['cedula_rnc'],
                    nombre = request.POST['nombre'],
                    relacion_con_INABIE = request.POST['relacion_con_inabie'],
                    numero_telefono = request.POST['telefono'],
                    tipo_persona = request.POST['tipo_persona']
                )

                nueva_persona.save()

                return render(request, './administracion_turnos/registro_turnos.html', {'fecha': date, 'mensaje_retroalimentacion': 'La persona fue agregada satisfactoriamente', 'personas_atendidas': personas_atendidas, 'direcciones': direcciones, 'departamentos': departamentos, 'divisiones': divisiones, 'turnos_de_hoy': turnos_de_hoy, "turnos_en_espera": turnos_en_espera, "turnos_siendo_atendidos": turnos_siendo_atendidos, "turnos_atendidos": turnos_atendidos})
            else:

                if 'departamento' in request.POST and 'division' in request.POST:

                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_persona_atendida']),
                    persona_representante_turno = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_representante_turno']),
                    motivo_solicitud_servicio = request.POST['motivo'],
                    direccion_servicio = Direccion.objects.get(nombre = request.POST["direccion"]),
                    departamento_servicio = Departamento.objects.get(nombre = request.POST['departamento'], direccion_perteneciente__nombre = request.POST['direccion']),
                    division_departamento_servicio = Division.objects.get(nombre = request.POST['division'], direccion_perteneciente__nombre = request.POST['direccion']),
                    preferencial = True if 'preferencial' in request.POST and request.POST['preferencial'] == 'on' else False,
                    comentarios = request.POST['comentario'],
                    creado_por = request.user
                    
                    )

                elif 'departamento' in request.POST:
                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_persona_atendida']),
                    persona_representante_turno = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_representante_turno']),
                    motivo_solicitud_servicio = request.POST['motivo'],
                    direccion_servicio = Direccion.objects.get(nombre = request.POST["direccion"]),
                    departamento_servicio = Departamento.objects.get(nombre = request.POST['departamento'], direccion_perteneciente__nombre = request.POST['direccion']),

                    preferencial = True if 'preferencial' in request.POST and request.POST['preferencial'] == 'on' else False,
                    comentarios = request.POST['comentario'],
                    creado_por = request.user
                    )
                elif 'division' in request.POST:
                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_persona_atendida']),
                    persona_representante_turno = PersonaAtendida.objects.get(cedula_rnc = request.POST['cedula_representante_turno']),
                    motivo_solicitud_servicio = request.POST['motivo'],
                    direccion_servicio = Direccion.objects.get(nombre = request.POST["direccion"]),

                    division_departamento_servicio = Division.objects.get(nombre = request.POST['division'], direccion_perteneciente__nombre = request.POST['direccion']),
                    preferencial = True if 'preferencial' in request.POST and request.POST['preferencial'] == 'on' else False,
                    comentarios = request.POST['comentario'],
                    creado_por = request.user
                    )

                nuevo_turno.save()

                obj = nuevo_turno
                
                """Crear turno para imprimir """
                pdf_w = 3.14961 #80 mm
                pdf_h = 3.14961
                pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
                pdf.set_margins(left=0, top=0, right=0)
                pdf.add_page()
                pdf.set_auto_page_break(False, margin=0)
                pdf.image(name='../INABIE_TIC/static/imagenes/cupula-blue.png',
                        x=1.12,
                        y=0.10,
                        w=0.9,
                        h=0.9,
                        type='png'
                        )

                pdf.set_font('Arial', 'B', 18)
                pdf.set_xy(0.04, 1.2)
                pdf.cell(w=0, h=0, txt='INABIE', align='C', ln=2)
                pdf.ln(0.9)

                pdf.set_font('Arial', '', 10)
                pdf.set_xy(0.05, 1.4)
                pdf.cell(w=0, h=0, txt='Bienvenido/a, su turno es:', align='C', ln=2)
                pdf.ln(0.4)

                pdf.set_font('Arial', 'B', 22)
                # pdf.set_xy(0.15, 1.1)
                pdf.cell(w=0, h=0, txt=obj.codigo, align='C', ln=2)
                pdf.ln(0.4)
                pdf.set_font('Arial', '', 9)

                if obj.departamento_servicio:
                    if len(obj.departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                        pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
                        pdf.ln(0.2)
                    else:
                        pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre[0:22]}...', align='C', ln=2) #departamento
                        pdf.ln(0.2)
                else: #si no existe el departamento es porque solo existe la division o seccion afiliada directamente a la direccion

                    pdf.cell(w=0, h=0, txt=f'Dirección: {request.POST["direccion"][0:22]}...', align='C', ln=2) 
                    pdf.ln(0.2)

                if obj.division_departamento_servicio:
                    if len(obj.division_departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                        pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
                        pdf.ln(0.3)
                    else:
                        pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre[0:22]}...', align='C', ln=2) #division
                        pdf.ln(0.3)
                else: #si no existe la division es porque solo existe el departamento u oficina afiliado directamente a la direccion

                    pdf.cell(w=0, h=0, txt=f'Dirección: {request.POST["direccion"][0:22]}...', align='C', ln=2) 
                    pdf.ln(0.2)

                if obj.departamento_servicio and obj.division_departamento_servicio: #si existe el departamento y la division
                    pdf.set_font('Arial', '', 9)
                    pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = obj.departamento_servicio, division_departamento_servicio = obj.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1
                elif obj.departamento_servicio:
                    pdf.set_font('Arial', '', 9)
                    pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = obj.departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1
                else: #solo existe la division
                    pdf.set_font('Arial', '', 9)
                    pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), division_departamento_servicio = obj.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1



                pdf.ln(0.2)
                pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
                pdf.ln(0.2)
                pdf.output(f'C:/media/Turno_{obj.codigo}_{obj.fecha_registro}.pdf')

                try:
                    ticket_turno = open(f'C:/media/Turno_{obj.codigo}_{obj.fecha_registro}.pdf', 'rb')
                    response = FileResponse(ticket_turno, as_attachment=True, filename=f'Turno_{obj.codigo}_{obj.fecha_registro}.pdf')
                    return response
                except:
                    request.session['message'] = 'El turno ha sido guardado, pero hubo un error generando el ticket.'
                    return redirect('/error')


                # render(request, './administracion_turnos/registro_turnos.html', {'fecha': date, 'mensaje_retroalimentacion': 'El turno fue registrado con exito', 'personas_atendidas': personas_atendidas, 'departamentos': departamentos, 'divisiones': divisiones, 'turnos_de_hoy': turnos_de_hoy})   

@login_required
def administracion_turnos_departamento(request):

    day = datetime.now().day
    month = datetime.now().month
    year = datetime.now().year
    date = f"{day}/{month}/{year}"


    try:
        empleado = Empleado.objects.get(usuario = request.user)
    except Exception as e:
        request.session['message'] = 'Tus datos de empleado no fueron encontrados, es posible que no estes registrado.'
        return redirect('/error')

    fecha_hoy = datetime.now().date()
    departamento_usuario = empleado.departamento.nombre if  empleado.departamento else None#los datos del empleado se pasan con json_script en el template para filtrar los turnos en el websocket
    division_usuario = empleado.division.nombre if empleado.division else None
    direccion_usuario =  empleado.direccion.nombre

    turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = False, estado = 'EN ESPERA')
    turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = True, estado = 'EN ESPERA')
    
    try:
        turno_actual = Turno.objects.get(direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, estado = 'ATENDIENDO', fecha_registro = fecha_hoy, usuario_ejecutor_del_servicio = request.user)

        historico_turnos = Turno.objects.filter(direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, persona_atendida__cedula_rnc = turno_actual.persona_atendida.cedula_rnc)
    except:
        turno_actual = None
        historico_turnos = None
    

    cargo_usuario = empleado.cargo.upper().split(" ") if empleado.cargo else []

    if "SECRETARIA" in cargo_usuario: #a las secretarias le deben aparecer todos los turnos de su direccion
        turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = False, estado = 'EN ESPERA')
        turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = True, estado = 'EN ESPERA')
        
        try:
            turno_actual = Turno.objects.get(direccion_servicio__nombre = direccion_usuario, estado = 'ATENDIENDO', fecha_registro = fecha_hoy, usuario_ejecutor_del_servicio = request.user)

            historico_turnos = Turno.objects.filter(direccion_servicio__nombre = direccion_usuario, persona_atendida__cedula_rnc = turno_actual.persona_atendida.cedula_rnc)
        except:
            turno_actual = None
            historico_turnos = None


    if request.method == 'GET': 
        
        return render(request, './administracion_turnos/servidor_departamental.html', {'fecha': date, 'turnos': turnos, 'turnos_preferenciales': turnos_preferenciales,
                                                                                        'data_empleado': {"direccion": direccion_usuario,"departamento": departamento_usuario, "division": division_usuario},
                                                                                        'turno_actual': turno_actual, 'historico_turnos': historico_turnos})   

    elif request.method == 'POST':

        if 'finalizar-turno' in request.POST:

            try:
                turno_atendido = Turno.objects.get(fecha_registro = fecha_hoy, codigo = request.POST["codigo"], estado = 'ATENDIENDO', usuario_ejecutor_del_servicio = request.user)

                turno_atendido.estado = 'ATENDIDO'
                turno_atendido.estado_solucion = str(request.POST["estado-solucion"])
                turno_atendido.comentario_departamental = str(request.POST["comentario-departamental"])

                turno_atendido.fecha_finalizado = datetime.now().date()
                turno_atendido.hora_finalizado = datetime.now().time()
                

                resta_tiempo = datetime.now() - datetime(
                    turno_atendido.fecha_registro.year,
                    turno_atendido.fecha_registro.month,
                    turno_atendido.fecha_registro.day,
                    turno_atendido.hora_registro.hour,
                    turno_atendido.hora_registro.minute,
                    turno_atendido.hora_registro.second,
                    )

                turno_atendido.duracion_servicio = (resta_tiempo.seconds / 60) - turno_atendido.tiempo_en_espera

                turno_atendido.save(update_fields=['estado', 'estado_solucion', 'comentario_departamental', 'fecha_finalizado', 'hora_finalizado', 'duracion_servicio'])

            except:
                pass

            turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = False, estado = 'EN ESPERA')

            turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = True, estado = 'EN ESPERA')

            if "SECRETARIA" in cargo_usuario: #a las secretarias le deben aparecer todos los turnos de su direccion
                turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = False, estado = 'EN ESPERA')

                turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = True, estado = 'EN ESPERA')

            return render(request, './administracion_turnos/servidor_departamental.html', {'fecha': date, 'turnos': turnos, 'turnos_preferenciales': turnos_preferenciales,
                                                                                            'data_empleado': {"direccion": direccion_usuario,"departamento": departamento_usuario, "division": division_usuario},
                                                                                            'turno_actual': None})
            

        elif 'atender-turno' in request.POST:
            try:
                

                if "SECRETARIA" in cargo_usuario: #a las secretarias le deben aparecer todos los turnos de su direccion
                    turno_a_atender = Turno.objects.get(fecha_registro = fecha_hoy, codigo = request.POST["codigo"], direccion_servicio__nombre = direccion_usuario, estado = 'EN ESPERA')
                else:
                    turno_a_atender = Turno.objects.get(fecha_registro = fecha_hoy, codigo = request.POST["codigo"], direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, estado = 'EN ESPERA')

                turno_a_atender.usuario_ejecutor_del_servicio = str(request.user)
                turno_a_atender.estado = 'ATENDIENDO'

                resta_tiempo = datetime.now() - datetime( #para saber el tiempo que tardo la persona en espera de ser atendido
                    turno_a_atender.fecha_registro.year,
                    turno_a_atender.fecha_registro.month,
                    turno_a_atender.fecha_registro.day,
                    turno_a_atender.hora_registro.hour,
                    turno_a_atender.hora_registro.minute,
                    turno_a_atender.hora_registro.second,
                )
                turno_a_atender.tiempo_en_espera = resta_tiempo.seconds / 60
                
                turno_a_atender.save(update_fields=['estado', 'usuario_ejecutor_del_servicio', 'tiempo_en_espera'])

                if "SECRETARIA" in cargo_usuario: #a las secretarias le deben aparecer todos los turnos de su direccion
                    historico_turnos = Turno.objects.filter(direccion_servicio__nombre = direccion_usuario, persona_atendida__cedula_rnc = turno_a_atender.persona_atendida.cedula_rnc)
                else:
                    historico_turnos = Turno.objects.filter(direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, persona_atendida__cedula_rnc = turno_a_atender.persona_atendida.cedula_rnc)
                

            except:
                turno_a_atender = Turno.objects.get(fecha_registro = fecha_hoy, codigo = request.POST["codigo"], direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, estado = 'ATENDIENDO', usuario_ejecutor_del_servicio = request.user)
                historico_turnos = historico_turnos = Turno.objects.filter(direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, persona_atendida__cedula_rnc = turno_a_atender.persona_atendida.cedula_rnc)

            if "SECRETARIA" in cargo_usuario: #a las secretarias le deben aparecer todos los turnos de su direccion
                turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = False, estado = 'EN ESPERA')
                
                turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, preferencial = True, estado = 'EN ESPERA')
            else:
                turnos = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = False, estado = 'EN ESPERA')
                
                turnos_preferenciales = Turno.objects.filter(fecha_registro = fecha_hoy, direccion_servicio__nombre = direccion_usuario, departamento_servicio__nombre = departamento_usuario, division_departamento_servicio__nombre = division_usuario, preferencial = True, estado = 'EN ESPERA')


            return render(request, './administracion_turnos/servidor_departamental.html', {'fecha': date, 'turnos': turnos, 'turnos_preferenciales': turnos_preferenciales,
                                                                                            'data_empleado': {"direccion": direccion_usuario,"departamento": departamento_usuario, "division": division_usuario},
                                                                                            'turno_actual': turno_a_atender, 'historico_turnos': historico_turnos})


def index(request):
    return render(request, 'chat/index.html', {})

def room(request, room_name):
    return render(request, 'chat/room.html', {
        'room_name': room_name
    })



    