from django.contrib import admin
from .models import Turno, PersonaAtendida
from django.contrib.messages import constants as messages
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from django.contrib.auth import get_permission_codename
from datetime import datetime, timedelta
from fpdf import FPDF
from django.http import FileResponse
import os
from win32printing import Printer

class PDF(FPDF):
    
    pass




@admin.action(description='Atender', permissions=['change'])
def atender(modeladmin, request, queryset):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:
        turno_elegido = queryset[0]

        numero_turno_elegido = turno_elegido.numero 

        if turno_elegido.preferencial:

            turno_elegido.estado = "ATENDIENDO"

            resta_tiempo = datetime.now() - datetime(
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
            turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

            turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])
        else:
            ultimo_turno = Turno.objects.filter(departamento_servicio = turno_elegido.departamento_servicio, numero = numero_turno_elegido - 1, preferencial = False).last()

            if ultimo_turno is None:

                turno_elegido.estado = "ATENDIENDO"

                resta_tiempo = datetime.now() - datetime(
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
                turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

                turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])

            elif ultimo_turno.estado == "ATENDIDO" or ultimo_turno.estado == "ATENDIENDO": #si el ultimo turno antes que este ha sido atendido o esta siendo atendido, puede proceder. Si es None, significa que es el primer turno del dia
                turno_elegido.estado = "ATENDIENDO"

                resta_tiempo = datetime.now() - datetime(
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
                turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

                turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])

                

            else:
                admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message= "El turno seleccionado no es el que corresponde atender ahora porque el turno anterior a este no ha sido atendido.")

            
            

        


        

    

@admin.action(description='Marcar como atendido', permissions=['change'])
def marcarComoAtendido(modeladmin, request, queryset):
    # if request.user.has_perms(['Recepcion.marcar_como_atendido']):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:

        turno_elegido = queryset[0]

        if request.user.empleado.departamento != turno_elegido.departamento_servicio and request.user.is_superuser == False:
            admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="Este turno no pertenece a su departamento o división.")
        elif turno_elegido.estado != "ATENDIENDO":
            admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="Este turno no esta siendo atendido.")
        else:

            if turno_elegido.estado != 'ATENDIDO':
            
                turno_elegido.estado = "ATENDIDO"
                turno_elegido.fecha_finalizado = datetime.now().date()
                turno_elegido.hora_finalizado = datetime.now().time()
                

                resta_tiempo = datetime.now() - datetime(
                    turno_elegido.fecha_registro.year,
                    turno_elegido.fecha_registro.month,
                    turno_elegido.fecha_registro.day,
                    turno_elegido.hora_registro.hour,
                    turno_elegido.hora_registro.minute,
                    turno_elegido.hora_registro.second,
                    )

                turno_elegido.duracion_servicio = (resta_tiempo.seconds / 60) - turno_elegido.tiempo_en_espera

                turno_elegido.save(update_fields = ['estado', 'fecha_finalizado', 'hora_finalizado', 'duracion_servicio'])

    

@admin.action(description='Marcar como descartado', permissions=['change', 'add'])
def marcarComoDescartado(modeladmin, request, queryset):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:
        turno_elegido = queryset[0]
            
        turno_elegido.estado = "DESCARTADO"

        turno_elegido.save(update_fields = ['estado'])

# from django.dispatch import receiver
# from django.db.models.signals import post_save
            
# @receiver(post_save, sender=Turno)
# def imprimirTicket(sender, instance, created, **kwargs):
#     if created:
#         if instance.estado == "EN ESPERA":

#             pdf_w = 3.14961 #80 mm
#             pdf_h = 3.14961
#             pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
#             pdf.set_margins(left=0, top=0, right=0)
#             pdf.add_page()
#             pdf.set_auto_page_break(False, margin=0)
#             pdf.image(name='C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/logo-inabie-centrado.png',
#                     x=0.75,
#                     y=0.2,
#                     w=1.7,
#                     h=1,
#                     type='png'
#                     )

#             pdf.set_font('Arial', '', 10)
#             pdf.set_xy(0.05, 1.4)
#             pdf.cell(w=0, h=0, txt='Bienvenido/a al INABIE, su turno es:', align='C', ln=2)
#             pdf.ln(0.4)

#             pdf.set_font('Arial', 'B', 32)
#             # pdf.set_xy(0.15, 1.1)
#             pdf.cell(w=0, h=0, txt=instance.codigo, align='C', ln=2)
#             pdf.ln(0.4)
#             pdf.set_font('Arial', '', 9)

#             if len(instance.departamento_servicio) > 22: #para evitar desbordamiento de texto
#                 pdf.cell(w=0, h=0, txt=f'Departamento: {instance.departamento_servicio[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
#                 pdf.ln(0.2)
#             else:
#                 pdf.cell(w=0, h=0, txt=f'Departamento: {instance.departamento_servicio}', align='C', ln=2) #departamento
#                 pdf.ln(0.2)

#             if len(instance.division_departamento_servicio) > 22: #para evitar desbordamiento de texto
#                 pdf.cell(w=0, h=0, txt=f'División: {instance.division_departamento_servicio[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
#                 pdf.ln(0.3)
#             else:
#                 pdf.cell(w=0, h=0, txt=f'División: {instance.division_departamento_servicio}', align='C', ln=2) #division
#                 pdf.ln(0.3)

#             pdf.set_font('Arial', '', 9)
#             pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = instance.departamento_servicio, division_departamento_servicio = instance.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona
#             pdf.ln(0.2)
#             pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
#             pdf.ln(0.2)
#             pdf.output(
#                 f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{instance.codigo}_{instance.fecha_registro}.pdf')

#             ticket_turno = open(
#                 f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{instance.codigo}_{instance.fecha_registro}.pdf', 'rb')
            
#             response = FileResponse(ticket_turno, as_attachment=False, filename=f'Turno_{instance.codigo}_{instance.fecha_registro}.pdf')

            
#             return response

def descargarTicket(modeladmin, request, queryset):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    elif request.user.empleado.cargo != 'RECEPCIONISTA' and request.user.is_superuser == False:
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No tienes permiso para realizar esta accion.")
    else:
        # para crear pdf para impresion de ticket de turno
        if queryset[0].estado == "EN ESPERA":

            pdf_w = 3.14961 #80 mm
            pdf_h = 3.14961
            pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
            pdf.set_margins(left=0, top=0, right=0)
            pdf.add_page()
            pdf.set_auto_page_break(False, margin=0)
            pdf.image(name='C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/logo-inabie-centrado.png',
                    x=0.75,
                    y=0.2,
                    w=1.7,
                    h=1,
                    type='png'
                    )

            pdf.set_font('Arial', '', 10)
            pdf.set_xy(0.05, 1.4)
            pdf.cell(w=0, h=0, txt='Bienvenido/a al INABIE, su turno es:', align='C', ln=2)
            pdf.ln(0.4)

            pdf.set_font('Arial', 'B', 32)
            # pdf.set_xy(0.15, 1.1)
            pdf.cell(w=0, h=0, txt=queryset[0].codigo, align='C', ln=2)
            pdf.ln(0.4)
            pdf.set_font('Arial', '', 9)

            if len(queryset[0].departamento_servicio) > 22: #para evitar desbordamiento de texto
                pdf.cell(w=0, h=0, txt=f'Departamento: {queryset[0].departamento_servicio[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
                pdf.ln(0.2)
            else:
                pdf.cell(w=0, h=0, txt=f'Departamento: {queryset[0].departamento_servicio}', align='C', ln=2) #departamento
                pdf.ln(0.2)

            if len(queryset[0].division_departamento_servicio) > 22: #para evitar desbordamiento de texto
                pdf.cell(w=0, h=0, txt=f'División: {queryset[0].division_departamento_servicio[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
                pdf.ln(0.3)
            else:
                pdf.cell(w=0, h=0, txt=f'División: {queryset[0].division_departamento_servicio}', align='C', ln=2) #division
                pdf.ln(0.3)

            pdf.set_font('Arial', '', 9)
            pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = queryset[0].departamento_servicio, division_departamento_servicio = queryset[0].division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona
            pdf.ln(0.2)
            pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
            pdf.ln(0.2)
            pdf.output(
                f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf')

            ticket_turno = open(
                f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf', 'rb')
            
            response = FileResponse(ticket_turno, as_attachment=False, filename=f'Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf')

            
            return response
        
        else:
            admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="Solo se puede imprimir turnos en espera.")
    
    # if os.path.exists(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf'):
    #     os.remove(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf')



class TurnoAdmin(admin.ModelAdmin):
    list_display = ('codigo', 'persona_atendida', 'preferencial', 'estado', 'departamento_servicio', 'division_departamento_servicio', 'motivo_solicitud_servicio', 'fecha_registro', 'hora_registro', 'fecha_finalizado', 'hora_finalizado', 'tiempo_en_espera', 'duracion_servicio')
    list_filter = ('preferencial', 'estado', 'fecha_registro')
    date_hierarchy = 'fecha_registro'
    search_fields = ('fecha_registro', 'codigo', 'persona_atendida__cedula_rnc', 'persona_atendida__nombre', 'motivo_solicitud_servicio', 'preferencial', 'descartado')
    autocomplete_fields = ('persona_atendida', 'departamento_servicio', 'division_departamento_servicio')
    # readonly_fields = ('codigo', )
    exclude = ('codigo', 'numero', 'fecha_finalizado', 'hora_finalizado', 'duracion_servicio', 'tiempo_en_espera', 'estado')
    actions = [atender, marcarComoAtendido, marcarComoDescartado, descargarTicket]
    
    def get_queryset(self, request): #reescribiendo el metodo get_queryset del modeladmin para el turno

        qs = super(TurnoAdmin, self).get_queryset(request)

        departamento = request.user.empleado.departamento
        division = request.user.empleado.division
        cargo = request.user.empleado.cargo

        if request.user.is_superuser:
            return qs
        
        elif cargo == 'RECEPCIONISTA':
            return qs.filter(fecha_registro=datetime.now().date())
            
        else:
            return qs.filter(departamento_servicio = departamento, division_departamento_servicio = division, fecha_registro = datetime.now().date())

        
        


    # def getActions(self, request):
    #     actions = super().get_actions(request)
    #     if 'delete_selected' in actions:
    #         del actions['delete_selected']
    #     return actions

    def has_marcar_como_atendido_permission(self, request):
        # opts = self.opts
        # codename = get_permission_codename('marcar_como_atendido', opts)
        return request.user.has_perm('Recepcion.marcar_como_atendido')



class PersonaAtendidaAdmin(admin.ModelAdmin):
    list_display = ('cedula_rnc', 'nombre', 'numero_telefono', 'tipo_persona')
    search_fields = ('cedula_rnc', 'nombre')



admin.site.register(Turno, TurnoAdmin)
admin.site.register(PersonaAtendida, PersonaAtendidaAdmin)

