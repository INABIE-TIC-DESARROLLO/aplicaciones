from django.contrib import admin
from django.forms import model_to_dict

from django.shortcuts import redirect
from .models import Turno, PersonaAtendida
from django.contrib.messages import constants as messages


from django.contrib.auth import get_permission_codename
from datetime import datetime, timedelta
from fpdf import FPDF
from django.http import FileResponse
from RecursosHumanos.models import Empleado
from win32api import ShellExecute
from AdministracionSistema.models import Departamento, Direccion, Division

class PDF(FPDF):
    
    pass




@admin.action(description='Atender', permissions=['change'])
def atender(modeladmin, request, queryset):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:
        turno_elegido = queryset[0]

        numero_turno_elegido = turno_elegido.numero 

        if turno_elegido.preferencial:

            turno_elegido.estado = "ATENDIENDO"

            resta_tiempo = datetime.now() - datetime( #para saber el tiempo que tardo la persona en espera de ser atendido
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
            turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

            turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])
        else:
            ultimo_turno = Turno.objects.filter(departamento_servicio = turno_elegido.departamento_servicio, numero = numero_turno_elegido - 1, preferencial = False).last()

            if ultimo_turno is None:

                turno_elegido.estado = "ATENDIENDO"

                resta_tiempo = datetime.now() - datetime(
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
                turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

                turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])

            elif ultimo_turno.estado == "ATENDIDO" or ultimo_turno.estado == "ATENDIENDO": #si el ultimo turno antes que este ha sido atendido o esta siendo atendido, puede proceder. Si es None, significa que es el primer turno del dia
                turno_elegido.estado = "ATENDIENDO"

                resta_tiempo = datetime.now() - datetime(
                turno_elegido.fecha_registro.year,
                turno_elegido.fecha_registro.month,
                turno_elegido.fecha_registro.day,
                turno_elegido.hora_registro.hour,
                turno_elegido.hora_registro.minute,
                turno_elegido.hora_registro.second,
                )
                turno_elegido.tiempo_en_espera = resta_tiempo.seconds / 60

                turno_elegido.save(update_fields = ['estado', 'tiempo_en_espera'])

                

            else:
                admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message= "El turno seleccionado no es el que corresponde atender ahora porque el turno anterior a este no ha sido atendido.")

            
            

        


        

    

@admin.action(description='Marcar como atendido', permissions=['change'])
def marcarComoAtendido(modeladmin, request, queryset):
    # if request.user.has_perms(['Recepcion.marcar_como_atendido']):
    empleado = Empleado.objects.filter(usuario = request.user)[0]

    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:

        turno_elegido = queryset[0]

        if empleado.departamento.nombre != turno_elegido.departamento_servicio and request.user.is_superuser == False:
            admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="Este turno no pertenece a su departamento o división.")
        elif turno_elegido.estado != "ATENDIENDO":
            admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="Este turno no esta siendo atendido.")
        else:

            if turno_elegido.estado != 'ATENDIDO':
            
                turno_elegido.estado = "ATENDIDO"
                turno_elegido.fecha_finalizado = datetime.now().date()
                turno_elegido.hora_finalizado = datetime.now().time()
                

                resta_tiempo = datetime.now() - datetime(
                    turno_elegido.fecha_registro.year,
                    turno_elegido.fecha_registro.month,
                    turno_elegido.fecha_registro.day,
                    turno_elegido.hora_registro.hour,
                    turno_elegido.hora_registro.minute,
                    turno_elegido.hora_registro.second,
                    )

                turno_elegido.duracion_servicio = (resta_tiempo.seconds / 60) - turno_elegido.tiempo_en_espera

                turno_elegido.save(update_fields = ['estado', 'fecha_finalizado', 'hora_finalizado', 'duracion_servicio'])

    

@admin.action(description='Marcar como descartado', permissions=['change', 'add'])
def marcarComoDescartado(modeladmin, request, queryset):
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    else:
        turno_elegido = queryset[0]
            
        turno_elegido.estado = "DESCARTADO"

        turno_elegido.save(update_fields = ['estado'])

# from django.dispatch import receiver
# from django.db.models.signals import post_save
            
# @receiver(post_save, sender=Turno)
# def imprimirTicket(sender, instance, created, **kwargs):
#     if created:
#         if instance.estado == "EN ESPERA":

#             pdf_w = 3.14961 #80 mm
#             pdf_h = 3.14961
#             pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
#             pdf.set_margins(left=0, top=0, right=0)
#             pdf.add_page()
#             pdf.set_auto_page_break(False, margin=0)
#             pdf.image(name='C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/logo-inabie-centrado.png',
#                     x=0.75,
#                     y=0.2,
#                     w=1.7,
#                     h=1,
#                     type='png'
#                     )

#             pdf.set_font('Arial', '', 10)
#             pdf.set_xy(0.05, 1.4)
#             pdf.cell(w=0, h=0, txt='Bienvenido/a al INABIE, su turno es:', align='C', ln=2)
#             pdf.ln(0.4)

#             pdf.set_font('Arial', 'B', 32)
#             # pdf.set_xy(0.15, 1.1)
#             pdf.cell(w=0, h=0, txt=instance.codigo, align='C', ln=2)
#             pdf.ln(0.4)
#             pdf.set_font('Arial', '', 9)

#             if len(instance.departamento_servicio) > 22: #para evitar desbordamiento de texto
#                 pdf.cell(w=0, h=0, txt=f'Departamento: {instance.departamento_servicio[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
#                 pdf.ln(0.2)
#             else:
#                 pdf.cell(w=0, h=0, txt=f'Departamento: {instance.departamento_servicio}', align='C', ln=2) #departamento
#                 pdf.ln(0.2)

#             if len(instance.division_departamento_servicio) > 22: #para evitar desbordamiento de texto
#                 pdf.cell(w=0, h=0, txt=f'División: {instance.division_departamento_servicio[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
#                 pdf.ln(0.3)
#             else:
#                 pdf.cell(w=0, h=0, txt=f'División: {instance.division_departamento_servicio}', align='C', ln=2) #division
#                 pdf.ln(0.3)

#             pdf.set_font('Arial', '', 9)
#             pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = instance.departamento_servicio, division_departamento_servicio = instance.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona
#             pdf.ln(0.2)
#             pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
#             pdf.ln(0.2)
#             pdf.output(
#                 f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{instance.codigo}_{instance.fecha_registro}.pdf')

#             ticket_turno = open(
#                 f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{instance.codigo}_{instance.fecha_registro}.pdf', 'rb')
            
#             response = FileResponse(ticket_turno, as_attachment=False, filename=f'Turno_{instance.codigo}_{instance.fecha_registro}.pdf')

            
#             return response

def descargarTicket(modeladmin, request, queryset):
    empleado = Empleado.objects.filter(usuario = request.user)[0]
    turno_dict = model_to_dict(queryset[0]) 
    print(turno_dict)
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes realizar esta accion con mas de un turno a la vez.")
    elif empleado.cargo != 'RECEPCIONISTA' and request.user.is_superuser == False:
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No tienes permiso para realizar esta accion.")
    else:
        # para crear pdf para impresion de ticket de turno
        if turno_dict['departamento_servicio'] != None and turno_dict['division'] != None:

                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = turno_dict['cedula_persona_atendida']),
                    motivo_solicitud_servicio = turno_dict['motivo'],
                    departamento_servicio = Departamento.objects.get(nombre = turno_dict['departamento'], direccion_perteneciente__nombre = turno_dict['direccion']),
                    division_departamento_servicio = Division.objects.get(nombre = turno_dict['division'], direccion_perteneciente__nombre = turno_dict['direccion']),
                    preferencial = True if 'preferencial' in turno_dict and turno_dict['preferencial'] == 'on' else False,
                    comentarios = turno_dict['comentario']
                    )

        elif turno_dict['departamento'] != None:
                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = turno_dict['cedula_persona_atendida']),
                    motivo_solicitud_servicio = turno_dict['motivo'],
                    departamento_servicio = Departamento.objects.get(nombre = turno_dict['departamento'], direccion_perteneciente__nombre = turno_dict['direccion']),

                    preferencial = True if 'preferencial' in turno_dict and turno_dict['preferencial'] == 'on' else False,
                    comentarios = turno_dict['comentario']
                    )
        elif turno_dict['division'] != None:
                    nuevo_turno = Turno(
                    persona_atendida = PersonaAtendida.objects.get(cedula_rnc = turno_dict['cedula_persona_atendida']),
                    motivo_solicitud_servicio = turno_dict['motivo'],

                    division_departamento_servicio = Division.objects.get(nombre = turno_dict['division'], direccion_perteneciente__nombre = turno_dict['direccion']),
                    preferencial = True if 'preferencial' in turno_dict and turno_dict['preferencial'] == 'on' else False,
                    comentarios = turno_dict['comentario']
                    )

        nuevo_turno.save()

        obj = nuevo_turno
                
        """Crear turno para imprimir """
        pdf_w = 3.14961 #80 mm
        pdf_h = 3.14961
        pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
        pdf.set_margins(left=0, top=0, right=0)
        pdf.add_page()
        pdf.set_auto_page_break(False, margin=0)
        pdf.image(name='C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/INABIE_TIC/static/imagenes/cupula-blue.png',
                        x=1.12,
                        y=0.10,
                        w=0.9,
                        h=0.9,
                        type='png'
                        )

        pdf.set_font('Arial', 'B', 18)
        pdf.set_xy(0.04, 1.2)
        pdf.cell(w=0, h=0, txt='INABIE', align='C', ln=2)
        pdf.ln(0.9)

        pdf.set_font('Arial', '', 10)
        pdf.set_xy(0.05, 1.4)
        pdf.cell(w=0, h=0, txt='Bienvenido/a, su turno es:', align='C', ln=2)
        pdf.ln(0.4)

        pdf.set_font('Arial', 'B', 22)
        # pdf.set_xy(0.15, 1.1)
        pdf.cell(w=0, h=0, txt=obj.codigo, align='C', ln=2)
        pdf.ln(0.4)
        pdf.set_font('Arial', '', 9)

        if obj.departamento_servicio:
            if len(obj.departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
                pdf.ln(0.2)
            else:
                pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre[0:22]}...', align='C', ln=2) #departamento
                pdf.ln(0.2)
        else: #si no existe el departamento es porque solo existe la division o seccion afiliada directamente a la direccion

            pdf.cell(w=0, h=0, txt=f'Dirección: {turno_dict["direccion"][0:22]}...', align='C', ln=2) 
            pdf.ln(0.2)

        if obj.division_departamento_servicio:
            if len(obj.division_departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
                pdf.ln(0.3)
            else:
                pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre[0:22]}...', align='C', ln=2) #division
                pdf.ln(0.3)
        else: #si no existe la division es porque solo existe el departamento u oficina afiliado directamente a la direccion

            pdf.cell(w=0, h=0, txt=f'Dirección: {turno_dict["direccion"][0:22]}...', align='C', ln=2) 
            pdf.ln(0.2)

        if obj.departamento_servicio and obj.division_departamento_servicio: #si existe el departamento y la division
            pdf.set_font('Arial', '', 9)
            pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = obj.departamento_servicio, division_departamento_servicio = obj.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1
        elif obj.departamento_servicio:
            pdf.set_font('Arial', '', 9)
            pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = obj.departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1
        else: #solo existe la division
            pdf.set_font('Arial', '', 9)
            pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), division_departamento_servicio = obj.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1



        pdf.ln(0.2)
        pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
        pdf.ln(0.2)
        pdf.output(
                    f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{obj.codigo}_{obj.fecha_registro}.pdf')

        ticket_turno = open(
                    f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{obj.codigo}_{obj.fecha_registro}.pdf', 'rb')
                    
                    
        response = FileResponse(ticket_turno, as_attachment=True, filename=f'Turno_{obj.codigo}_{obj.fecha_registro}.pdf')

             
        return response
        # render(request, './administracion_turnos/registro_turnos.html', {'fecha': date, 'mensaje_retroalimentacion': 'El turno fue registrado con exito', 'personas_atendidas': personas_atendidas, 'departamentos': departamentos, 'divisiones': divisiones, 'turnos_de_hoy': turnos_de_hoy}) 

    
    # if os.path.exists(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf'):
    #     os.remove(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{queryset[0].codigo}_{queryset[0].fecha_registro}.pdf')

# @admin.action(description='Asignar direccion')
# def asignar_direccion(modeladmin, request, queryset):
#     for turno in queryset:
#         if turno.direccion_servicio is None:
#             if turno.departamento_servicio:
#                 turno_a_modificar = Turno.objects.get(pk_id = turno.pk_id)
#                 turno_a_modificar.direccion_servicio = turno.departamento_servicio.direccion_perteneciente
#                 turno_a_modificar.save()
#             elif turno.division_departamento_servicio:
#                 turno_a_modificar = Turno.objects.get(pk_id = turno.pk_id)
#                 turno_a_modificar.direccion_servicio = turno.division_departamento_servicio.direccion_perteneciente
#                 turno_a_modificar.save()
            #SIEMPRE ESPECIFICA LOS CAMPOS QUE SE VAN A ACTUALIZAR, POR EL METODO SAVE SIEMPRE CORRE EL CODIGO QUE ESTA EN EL MODELO Y LO GUARDA COMO SI FUERA NUEVO


class TurnoAdmin(admin.ModelAdmin):
    list_display = tuple([f.name for f in Turno._meta.fields])
    list_filter = ('preferencial', 'estado', 'fecha_registro', 'direccion_servicio', 'departamento_servicio', 'division_departamento_servicio',)
    date_hierarchy = 'fecha_registro'
    search_fields = ('fecha_registro', 'codigo', 'persona_atendida__cedula_rnc', 'persona_atendida__nombre', 'motivo_solicitud_servicio')
    autocomplete_fields = ('persona_atendida', 'departamento_servicio', 'division_departamento_servicio')
    # readonly_fields = ('codigo', )
    exclude = ('codigo', 'numero', 'fecha_finalizado', 'hora_finalizado', 'duracion_servicio', 'tiempo_en_espera')
    actions = [atender, marcarComoAtendido, marcarComoDescartado, descargarTicket]
    # fieldsets = (
    #     (None, {
    #         "fields": (
    #             ('persona_atendida', 'preferencial', 'motivo_solicitud_servicio'),
    #             ('departamento_servicio', 'division_departamento_servicio', 'usuario_ejecutor_del_servicio'),
    #             ('comentarios'),
    #             ('estado', 'estado_solucion')

    #         ),
    #     }),
    # )
    
    
    # readonly_fields = ('teacher', 'referral_first_name', 'referral_last_name')
    recepcionista_readonly_fields = ('estado_solucion', 'estado')
    servidor_departamental_readonly_fields = ('persona_atendida', 'preferencial', 'motivo_solicitud_servicio', 'departamento_servicio', 'division_departamento_servicio', 'usuario_ejecutor_del_servicio')

    def get_readonly_fields(self, request, obj=None):
        
        if request.user.groups.filter(name='Recepcionistas').exists():
            return self.recepcionista_readonly_fields
        elif request.user.groups.filter(name='Servidores Departamentales').exists() and obj:
            return self.servidor_departamental_readonly_fields
        else:
            return super(TurnoAdmin, self).get_readonly_fields(request, obj=obj)

    def response_add(self, request, obj, post_url_continue = None):
        super().response_add(request, obj, post_url_continue)
        empleado = Empleado.objects.filter(usuario = request.user)[0]

        if empleado.cargo != 'RECEPCIONISTA' and request.user.is_superuser == False:
            admin.ModelAdmin.message_user(request=request, level= messages.ERROR, message="No tienes permiso para realizar esta accion.")
        else:
                # para crear pdf para impresion de ticket de turno

            if obj.estado == "EN ESPERA":

                pdf_w = 3.14961 #80 mm
                pdf_h = 3.14961
                pdf = PDF(orientation='L', unit='in', format=(pdf_h, pdf_w))
                pdf.set_margins(left=0, top=0, right=0)
                pdf.add_page()
                pdf.set_auto_page_break(False, margin=0)
                pdf.image(name='C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/INABIE_TIC/static/imagenes/cupula-blue.png',
                        x=1.12,
                        y=0.10,
                        w=0.9,
                        h=0.9,
                        type='png'
                        )

                pdf.set_font('Arial', 'B', 18)
                pdf.set_xy(0.04, 1.2)
                pdf.cell(w=0, h=0, txt='INABIE', align='C', ln=2)
                pdf.ln(0.9)

                pdf.set_font('Arial', '', 10)
                pdf.set_xy(0.05, 1.4)
                pdf.cell(w=0, h=0, txt='Bienvenido/a, su turno es:', align='C', ln=2)
                pdf.ln(0.4)

                pdf.set_font('Arial', 'B', 32)
                # pdf.set_xy(0.15, 1.1)
                pdf.cell(w=0, h=0, txt=obj.codigo, align='C', ln=2)
                pdf.ln(0.4)
                pdf.set_font('Arial', '', 9)

                if len(obj.departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                    pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre[0:22]}...', align='C', ln=2) #departamento hasta el caracter especificado
                    pdf.ln(0.2)
                else:
                    pdf.cell(w=0, h=0, txt=f'Departamento: {obj.departamento_servicio.nombre}', align='C', ln=2) #departamento
                    pdf.ln(0.2)

                if len(obj.division_departamento_servicio.nombre) > 22: #para evitar desbordamiento de texto
                    pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre[0:22]}...', align='C', ln=2) #division hasta el caracter especificado
                    pdf.ln(0.3)
                else:
                    pdf.cell(w=0, h=0, txt=f'División: {obj.division_departamento_servicio.nombre}', align='C', ln=2) #division
                    pdf.ln(0.3)

                pdf.set_font('Arial', '', 9)
                pdf.cell(w=0, h=0, txt=f'Turnos en espera: {len(list(Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date(), departamento_servicio = obj.departamento_servicio, division_departamento_servicio = obj.division_departamento_servicio))) - 1}', align='C', ln=2) #turnos en espera sin contar el de la persona, si se intenta generar el ticket en un dia que no corresponde al del turno, devuelve -1
                pdf.ln(0.2)
                pdf.cell(w=0, h=0, txt=f'Fecha: {datetime.strftime(datetime.now(), "%d/%m/%y")} Hora: {datetime.strftime(datetime.now(), "%H:%M:%S")}', align='C', ln=2) #fecha de registro
                pdf.ln(0.2)
                pdf.output(
                    f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{obj.codigo}_{obj.fecha_registro}.pdf')

                ticket_turno = open(
                    f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Recepcion/turnos/Turno_{obj.codigo}_{obj.fecha_registro}.pdf', 'rb')
                    
                    
                response = FileResponse(ticket_turno, as_attachment=True, filename=f'Turno_{obj.codigo}_{obj.fecha_registro}.pdf')

                    
                return response
                    
                
            else:

                admin.ModelAdmin.message_user(request=request, level= messages.ERROR, message="Solo se puede imprimir turnos en espera.")

    def save_model(self, request, obj, form, change):

        if change and obj.estado == "ATENDIDO" and obj.estado_solucion != "RESUELTO":
            
            if obj.comentarios == None or obj.comentarios == "":
                admin.ModelAdmin.message_user(request=request, self=TurnoAdmin, level= messages.ERROR, message="Por favor escriba un comentario con al menos 15 caracteres")   
                raise Exception("Por favor escriba un comentario con al menos 15 caracteres")
            elif len(obj.comentarios) < 15:
                admin.ModelAdmin.message_user(request=request, self=TurnoAdmin, level= messages.ERROR, message="El comentario debe contener al menos 15 caracteres")
                raise Exception("El comentario debe contener al menos 15 caracteres")

            else:
                return super().save_model(request, obj, form, change)
                

        elif change == False or change is None:
            
            return super().save_model(request, obj, form, change)
    

            


        
        
        

    # def get_queryset(self, request): #reescribiendo el metodo get_queryset del modeladmin para el turno

    #     qs = super(TurnoAdmin, self).get_queryset(request)

    #     empleado = Empleado.objects.filter(usuario = request.user)[0]

    #     departamento = empleado.departamento.nombre
    #     division = empleado.division.nombre
    #     cargo = empleado.cargo

    #     if request.user.is_superuser:
    #         return qs
        
    #     elif cargo == 'RECEPCIONISTA':
    #         return qs.filter(fecha_registro=datetime.now().date())
            
    #     else:
    #         return qs.filter(departamento_servicio__nombre = departamento, division_departamento_servicio__nombre = division, fecha_registro = datetime.now().date())

        
        


    # def getActions(self, request):
    #     actions = super().get_actions(request)
    #     if 'delete_selected' in actions:
    #         del actions['delete_selected']
    #     return actions

    def has_marcar_como_atendido_permission(self, request):
        # opts = self.opts
        # codename = get_permission_codename('marcar_como_atendido', opts)
        return request.user.has_perm('Recepcion.marcar_como_atendido')



class PersonaAtendidaAdmin(admin.ModelAdmin):
    list_display = ('cedula_rnc', 'nombre', 'numero_telefono', 'tipo_persona')
    search_fields = ('cedula_rnc', 'nombre')



admin.site.register(Turno, TurnoAdmin)
admin.site.register(PersonaAtendida, PersonaAtendidaAdmin)

