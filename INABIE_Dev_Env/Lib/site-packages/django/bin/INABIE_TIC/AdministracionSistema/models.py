
from django.db import models
from django.contrib.auth.models import User
import cargosEmpleados


# class Empleado(models.Model):
#     user = models.OneToOneField(User, on_delete=models.CASCADE)
#     departamento = models.ForeignKey("Departamento", verbose_name="Departamento u Oficina", on_delete=models.CASCADE, null=True, blank=True)
#     division = models.ForeignKey("Division", verbose_name="Division o Sección", on_delete=models.CASCADE, null=True, blank=True)
#     cargo = models.CharField("Cargo", max_length=255, choices=cargosEmpleados.CARGOSEMPLEADOS, null=True, blank=True)
#     def __str__(self):
#         return self.user.username

# ------------------- Division territorial RD ---------------------------------

class ProvinciaManager(models.Manager):
    def get_by_natural_key(self, nombre):
        return self.get(nombre=nombre)

class MunicipioManager(models.Manager):
    def get_by_natural_key(self, nombre):
        return self.get(nombre=nombre)

class Provincia(models.Model):
    id = models.AutoField("Id", primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    regional_asociada = models.CharField("Regional Asociada", max_length=2)
    zona_asociada = models.CharField("Zona Asociada", max_length=50)

    objects = ProvinciaManager()

    def __str__(self):
        return self.nombre

    class Meta:
        unique_together = ['nombre']

    def natural_key(self):
        return (self.nombre)

class Municipio(models.Model):
    id = models.AutoField("Id", primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    distrito_asociado = models.CharField("Distrito Asociado", max_length=4)
    provincia_perteneciente = models.ForeignKey("Provincia", verbose_name="Provincia perteneciente", on_delete=models.CASCADE, null=True, blank=True)


    objects = MunicipioManager()

    def __str__(self):
        return self.nombre

    class Meta:
        unique_together = ['nombre']

    def natural_key(self):
        return (self.nombre)

# ------------------ Organigrama del inabie ----------------------------------------

class Direccion(models.Model):
    pk_id = models.AutoField(primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    nombre_director = models.CharField("Director", max_length=255, null=True, blank=True)

    class Meta:
        verbose_name_plural = 'Direcciones INABIE'

    def __str__(self):
        return self.nombre
    


class Departamento(models.Model):
    pk_id = models.AutoField(primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    nombre_encargado = models.CharField("Encargado", max_length=255, null=True, blank=True)
    direccion_perteneciente = models.ForeignKey("Direccion", verbose_name="Direccion Perteneciente", on_delete=models.CASCADE, null=True, blank=True)
    piso = models.CharField("Piso", max_length=1, null=True, blank=True)
    habilitado_para_turnos = models.BooleanField("Habilitado para turnos", default=True)

    class Meta:
        verbose_name = "Departamento u Oficina"

    def __str__(self):
        return self.nombre


class Division(models.Model):
    pk_id = models.AutoField(primary_key=True)
    nombre = models.CharField("Nombre", max_length=255)
    nombre_encargado = models.CharField("Encargado", max_length=255, null=True, blank=True)
    departamento_perteneciente = models.ForeignKey("Departamento", verbose_name="Departamento Perteneciente", on_delete=models.CASCADE, null=True, blank=True)
    direccion_perteneciente = models.ForeignKey("Direccion", verbose_name="Direccion Perteneciente", on_delete=models.CASCADE, null=True, blank=True)
    piso = models.CharField("Piso", max_length=1, null=True, blank=True)
    habilitado_para_turnos = models.BooleanField("Habilitado para turnos", default=True)

    class Meta:
        verbose_name = "División o Sección"

    def __str__(self):
        return self.nombre


class ArchivosExcelDivisionTerritorial(models.Model):
    nombre = models.CharField("Nombre Archivo", max_length=255, default="Archivo Excel")
    fecha = models.DateTimeField("Fecha de subida", auto_now=True, auto_now_add=False)
    archivo = models.FileField("Archivos excel de division territorial", upload_to=r'C:\Users\opdbd07\Desktop\INABIE_APPS_01\INABIE_Dev_Env\Lib\site-packages\django\bin\INABIE_TIC\AdministracionSistema\archivos_excel_division_territorial', max_length=2000)

    def __str__(self):
        return self.nombre


# DEPARTAMENTOS = [("DIRECCIÓN EJECUTIVA", "DIRECCIÓN EJECUTIVA"), ("JURÍDICO", "JURÍDICO"), ("COMUNICACIÓNES", "COMUNICACIÓNES"), ("PLANIFICACIÓN Y DESARROLLO: FORMULACIÓN, MONITOREO Y EVAL. DE PPP", "FORMULACIÓN, MONITOREO Y EVAL. DE PPP"), ("PLANIFICACIÓN Y DESARROLLO: DES. INSTITUCIONAL Y GESTIÓN DE CALIDAD", "DESARROLLO INSTITUCIONAL Y GESTIÓN DE CALIDAD"), ("PLANIFICACIÓN Y DESARROLLO: COOPERACIÓN INTERNACIONAL", "COOPERACIÓN INTERNACIONAL"), ("FISCALIZACIÓN Y CONTROL", "FISCALIZACIÓN Y CONTROL"), ("RECURSOS HUMANOS", "RECURSOS HUMANOS"), ("GESTIÓN DE SALUD ESCOLAR", "GESTIÓN DE SALUD ESCOLAR"), ("SERVICIOS ESTUDIANTILES", "SERVICIOS ESTUDIANTILES"), ("ASEGURAMIENTO DE LA CALIDAD DE LOS ALIMENTOS", "ASEGURAMIENTO DE LA CALIDAD DE LOS ALIMENTOS"), ("NUTRICIÓN", "NUTRICIÓN"), ("GESTIÓN ALIMENTARIA", "GESTIÓN ALIMENTARIA"), ("TECNOLOGÍA DE LA INFORMACIÓN Y COMUNICACIÓN", "TECNOLOGÍA DE LA INFORMACIÓN Y COMUNICACIÓN"), ("FINANCIERO", "FINANCIERO"), ("ADMINISTRATIVO", "ADMINISTRATIVO"), ("COMPRAS Y CONTRATACIONES", "COMPRAS Y CONTRATACIONES")]

# DIVISIONES =[("LITIGIOS", "LITIGIOS"), ("ELABORACIÓN DE DOCUMENTOS LEGALES", "ELABORACIÓN DE DOCUMENTOS LEGALES"), ("RELACIONES PÚBLICAS", "RELACIONES PÚBLICAS"), ("PROTOCOLO Y EVENTOS", "PROTOCOLO Y EVENTOS"), ("FISCALIZACIÓN DE TRANSFERENCIA A C. E.", "FISCALIZACIÓN DE TRANSFERENCIA A C. E."), ("CONTROL FINANCIERO", "CONTROL FINANCIERO"), ("RECLUTAMIENTO Y SELECCION DE PERSONAL", "RECLUTAMIENTO Y SELECCION DE PERSONAL"), ("REGISTRO, CONTROL Y NOMINA DE PERSONAL", "REGISTRO, CONTROL Y NOMINA DE PERSONAL"), ("CAPACITACIÓN Y DESARROLLO", "CAPACITACIÓN Y DESARROLLO"), ("SALUD VISUAL", "SALUD VISUAL"), ("SALUD BUCAL", "SALUD BUCAL"), ("SALUD AUDITIVA", "SALUD AUDITIVA"), ("EPIDEMIOLOGÍA E INVESTIGACIÓN", "EPIDEMIOLOGÍA E INVESTIGACIÓN"), ("APOYO ESTUDIANTIL", "APOYO ESTUDIANTIL"), ("PARTICIPACIÓN SOCIAL", "PARTICIPACIÓN SOCIAL"), ("ANÁLISIS DE PRODUCTOS", "ANÁLISIS DE PRODUCTOS"), ("INSPECCIÓN Y VERIFICACIÓN A PROVEEDORES", "INSPECCIÓN Y VERIFICACION A PROVEEDORES"), ("DESARROLLO DE PRODUCTOS", "DESARROLLO DE PRODUCTOS"), ("VIGILANCIA ALIMENTARIA Y NUTRICIONAL", "VIGILANCIA ALIMENTARIA Y NUTRICIONAL"), ("OPERACIONES", "OPERACIONES"), ("SEGUIMIENTO AL SERVICIO DE ALIMENTACIÓN", "SEGUIMIENTO AL SERVICIO DE ALIMENTACIÓN"), ("DESARROLLO E IMPLEMENTACIÓN DE SISTEMAS", "DESARROLLO E IMPLEMENTACIÓN DE SISTEMAS"), ("ADMINISTRACIÓN DEL SERVICIO TIC", "ADMINISTRACIÓN DEL SERVICIO TIC"), ("TESORERÍA", "TESORERÍA"), ("CONTABILIDAD", "CONTABILIDAD"), ("TRANSPORTACIÓN", "TRANSPORTACIÓN"), ("SERVICIOS GENERALES", "SERVICIOS GENERALES"), ("COMPRAS", "COMPRAS"), ("LICITACIONES", "LICITACIONES")]



# Create your models here.
