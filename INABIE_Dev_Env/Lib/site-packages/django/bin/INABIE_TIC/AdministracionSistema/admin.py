from django.contrib.auth.models import User
from django.contrib import admin, messages
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
import openpyxl
from django.http import HttpResponse
import datetime
from .models import Provincia, Municipio, Direccion, Departamento, Division, ArchivosExcelDivisionTerritorial
import openpyxl


@admin.action(description="Exportar a excel")
def exportarExcel(modeladmin, request, queryset):

    libro_excel = openpyxl.Workbook()

    # for usuario in queryset:
    #     fila = []
    #     for propiedadesUsuario in vars(usuario).items(): #para obtener primera fila, es decir, nombre de las columnas
    #         fila.append(propiedadesUsuario[0])
        
    #     fila.pop(0)
    #     libro_excel.active.append(fila)   
    #     break
    libro_excel.active.append(['Usuario', 'Fecha_Ultimo_Login', 'Es_Staff', 'Es_Superusuario', 'Nombres', 'Apellidos', 'Email', 'Activo', 'Fecha_Registro'])

    for usuario in queryset:
        fila = []

        fila.append(usuario.username)
        if usuario.last_login is not None:
            fila.append(usuario.last_login.strftime("%m-%d-%Y_%H-%M-%S"))
        fila.append(usuario.is_staff)
        fila.append(usuario.is_superuser)
        fila.append(usuario.first_name)
        fila.append(usuario.last_name)
        fila.append(usuario.email)
        fila.append(usuario.is_active)
        if usuario.date_joined is not None:
            fila.append(usuario.date_joined.strftime("%m-%d-%Y_%H-%M-%S"))


        libro_excel.active.append(fila)
        
    fechaYHoraActual = datetime.datetime.now().strftime("%m-%d-%Y_%H-%M-%S")

    libro_excel.save(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/AdministracionSistema/ArchivosExcel/inabie_usuarios_sistema_{fechaYHoraActual}.xlsx')

    archivo_excel = open(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/AdministracionSistema/ArchivosExcel/inabie_usuarios_sistema_{fechaYHoraActual}.xlsx', 'rb')

    response = HttpResponse(archivo_excel, headers= {
        'Content-Type': 'application/vnd.ms-excel',
        'Content-Disposition': 'attachment; filename="inabie_usuarios_sistema_{fechaYHoraActual}.xlsx"'.format(fechaYHoraActual = fechaYHoraActual)
    })

    return response

# class EmpleadoInline(admin.StackedInline):
#     model = Empleado
#     can_delete = False
#     verbose_name_plural = 'Empleado'
    

# class UserAdmin(BaseUserAdmin):
#     inlines = (EmpleadoInline,)
#     # list_display = ('username', 'last_login', 'is_staff', 'is_superuser', 'first_name', 'last_name', 'email', 'is_active', 'date_joined')
#     # list_filter = ('is_staff', 'is_superuser', 'is_active', 'date_joined')
#     actions = [exportarExcel]

class DireccionAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'nombre_director')

# --------- Division territoial model admin ------

class ProvinciaAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'regional_asociada')
    search_fields = ('id', 'nombre', 'regional_asociada')

class MunicipioAdmin(admin.ModelAdmin):
    list_display = ('nombre', 'distrito_asociado')
    search_fields = ('id', 'nombre', 'distrito_asociado')

def quitarGuion(palabra):

    if '-' in palabra:

        separacionPorGuion = palabra.split('-')

        union = ''.join(separacionPorGuion)

        return union

    return palabra

def agregarCeros(valorATransformar, cantidad_digitos_deseada): #agrega ceros al inicio del string

    valorRecibido = str(valorATransformar)
    cantidadDigitosValorRecibido = len(valorRecibido)

    if(cantidadDigitosValorRecibido == cantidad_digitos_deseada):
        return valorRecibido
    else:
        cantidadCerosFaltantes = cantidad_digitos_deseada - cantidadDigitosValorRecibido

        nuevosCeros = ''

        for i in range(0, cantidadCerosFaltantes):
            nuevosCeros += '0'
            
        return nuevosCeros + valorRecibido


@admin.action(description='Cargar Provincias')
def cargarProvincias(modelAdmin, request, queryset):
    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        

        for provincia in archivo.active.values:
            provincias = [p.nombre for p in Provincia.objects.all()]
            nombre = provincia[0]

            if nombre not in provincias:
                regional_asociada = agregarCeros(provincia[1], 2)

                nueva_provincia = Provincia(nombre= nombre, regional_asociada = regional_asociada)

                nueva_provincia.save(force_insert= True)
        


@admin.action(description='Cargar Municipios')
def cargarMunicipios(modelAdmin, request, queryset):
    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        for municipio in archivo.active.values:
            municipios = [m.nombre for m in Municipio.objects.all()]
            nombre = municipio[0]

            if nombre not in municipios:
                distrito_asociado = agregarCeros(municipio[1], 4)

                try: #evitar excepciones por busqueda de valores nulos en el filtro
                    provincia_perteneciente = Provincia.objects.filter(nombre = municipio[2])[0]
                except:
                    provincia_perteneciente = None
                    
                zona = None

                nuevo_municipio = Municipio(nombre= nombre, distrito_asociado = distrito_asociado, provincia_perteneciente = provincia_perteneciente, zona = zona)

                nuevo_municipio.save(force_insert= True)


#------- Organigrama model admin ---------

class DireccionAdmin(admin.ModelAdmin):
    campos = [f.name for f in Direccion._meta.fields]
    campos.remove('pk_id')
    list_display = tuple(campos)
    search_fields = ('nombre', 'nombre_director')   

class DepartamentoAdmin(admin.ModelAdmin):
    campos = [f.name for f in Departamento._meta.fields]
    campos.remove('pk_id')
    list_display = tuple(campos)
    search_fields = ('nombre', )
    list_filter = ('direccion_perteneciente', 'piso')


class DivisionAdmin(admin.ModelAdmin):
    campos = [f.name for f in Division._meta.fields]
    campos.remove('pk_id')
    list_display = tuple(campos)
    search_fields = ('nombre', )
    list_filter = ('departamento_perteneciente', 'direccion_perteneciente')

class ArchivosExcelDivisionTerritorialAdmin(admin.ModelAdmin):

    list_display = ('nombre', 'fecha', 'archivo')
    search_fields = ('nombre', 'fecha')
    actions = [cargarProvincias, cargarMunicipios]


# admin.site.unregister(User)
# admin.site.register(User, UserAdmin)

admin.site.register(Provincia, ProvinciaAdmin)
admin.site.register(Municipio, MunicipioAdmin)
admin.site.register(Direccion, DireccionAdmin)
admin.site.register(Departamento, DepartamentoAdmin)
admin.site.register(Division, DivisionAdmin)
admin.site.register(ArchivosExcelDivisionTerritorial, ArchivosExcelDivisionTerritorialAdmin)


