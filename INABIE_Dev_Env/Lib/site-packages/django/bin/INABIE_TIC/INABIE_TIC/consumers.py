
from cgitb import text
import json
from asgiref.sync import async_to_sync, sync_to_async
from channels.generic.websocket import AsyncWebsocketConsumer
from django.http import FileResponse
from datetime import datetime



from Recepcion.models import Turno
from channels.db import database_sync_to_async
from django.dispatch import receiver
from django.db.models.signals import post_save, post_delete
import channels.layers

from django.core import serializers

from AdministracionSistema.models import Provincia, Municipio

class WSTurnos(AsyncWebsocketConsumer):
    
    async def connect(self):

        await self.accept()
        await self.channel_layer.group_add("turnos", self.channel_name)

        global WSTurnos_instance 
        WSTurnos_instance = self
     
    async def disconnect(self, close_code):
        print("Se ha cerrado el websocket")
        await self.channel_layer.group_discard("turnos", self.channel_name)
    


    async def receive(self, text_data=None, bytes_data=None):

        turnos_siendo_atendidos = await self.get_turnosSiendoAtendidos()
        turnos_en_espera = await self.get_turnosEnEspera()
        res = list(turnos_siendo_atendidos) + list(turnos_en_espera)

        data = {}
        data["turnos_en_espera"] = []
        data["turnos_siendo_atendidos"] = []

        for turno in res:
            turno = {
                "direccion_servicio": turno.direccion_servicio.nombre,
                "departamento_servicio" : turno.departamento_servicio.nombre if turno.departamento_servicio else None,
                "division_departamento_servicio" : turno.division_departamento_servicio.nombre if turno.division_departamento_servicio else None, 
                "nombre_persona_atendida" : turno.persona_atendida.nombre, 
                "cedula_rnc_persona_atendida" : turno.persona_atendida.cedula_rnc, 
                "codigo" : turno.codigo, 
                "preferencial" : turno.preferencial, 
                "estado" : turno.estado,
                "piso_turno" : turno.division_departamento_servicio.piso if turno.division_departamento_servicio else turno.departamento_servicio.piso,
                "hora_registro": turno.hora_registro.strftime("%H:%M:%S"),
                "comentarios": turno.comentarios
            }

            if turno["estado"] == "ATENDIENDO":
                data["turnos_siendo_atendidos"].append(turno)

            if turno["estado"] == "EN ESPERA":
                data["turnos_en_espera"].append(turno)

        res_json = json.dumps(data)

        # await self.send(res_json)

        await self.channel_layer.group_send(
            "turnos",
            {
                "type": "send.message",
                "text": res_json,
            },
        )
    
    @database_sync_to_async
    def get_turnosSiendoAtendidos(self):
 
        return Turno.objects.filter(estado = "ATENDIENDO", fecha_registro = datetime.now().date())

    @database_sync_to_async
    def get_turnosEnEspera(self):
 
        return Turno.objects.filter(estado = "EN ESPERA", fecha_registro = datetime.now().date())

    async def send_message(self, event):
        data = {}
        data["turnos_en_espera"] = []
        data["turnos_siendo_atendidos"] = []
        data["turnos_atendidos"] = []
        data["turnos_descartados"] = []

        if event['text']['estado'] == "ATENDIENDO":     
            data["turnos_siendo_atendidos"].append(event['text'])


        if event['text']['estado'] == "EN ESPERA": 
            data["turnos_en_espera"].append(event['text']) 

        if event['text']['estado'] == "ATENDIDO": 
            data["turnos_atendidos"].append(event['text']) 

        if event['text']['estado'] == "DESCARTADO": 
            data["turnos_descartados"].append(event['text']) 


        res = json.dumps(data)   

        await self.send(text_data= res)

    @receiver(post_save, sender=Turno)
    def muestraTurnos(sender, instance, created, **kwargs):

        message = {
            "nombre_persona_atendida": instance.persona_atendida.nombre,
            "cedula_rnc_persona_atendida": instance.persona_atendida.cedula_rnc,
            "codigo": instance.codigo,
            "preferencial": instance.preferencial,
            "estado": instance.estado,
            "direccion_servicio": instance.direccion_servicio.nombre,
            "departamento_servicio" : instance.departamento_servicio.nombre if instance.departamento_servicio else None,
            "division_departamento_servicio" : instance.division_departamento_servicio.nombre if instance.division_departamento_servicio else None, 
            "piso_turno" : instance.division_departamento_servicio.piso if instance.division_departamento_servicio else instance.departamento_servicio.piso,
            "hora_registro": instance.hora_registro.strftime("%H:%M:%S"),
            "comentarios": instance.comentarios

        }
        
        channel_layer = channels.layers.get_channel_layer()

        async_to_sync(WSTurnos_instance.channel_layer.group_send)(
            "turnos",
            {
                "type": "send.message",
                "text": message,
            },
        )

        # async_to_sync(channel_layer.send)(WSTurnos_instance.channel_name, {
        # "type": "send.message",
        # "text": message,
        # })


#----------------------- GEOAPP -----------------------------
from PAE.models import Oferente, Escuela
from AdministracionSistema.models import Provincia, Municipio

class Geoapp(AsyncWebsocketConsumer):

    
    
    async def connect(self):


        await self.accept()

        global geoapp_instance
        geoapp_instance = self

        data = {}
        oferentes = json.loads(await self.getOferentes())
        escuelas = json.loads(await self.getEscuelas())
        data['oferentes'] = {}
        data['escuelas'] = {}
        
        
        for oferente in oferentes:
            data['oferentes'][oferente['pk']] = oferente['fields']



        for escuela in escuelas:
            data['escuelas'][escuela['pk']] = escuela['fields']




        res = json.dumps(data)

        await self.send(text_data= res)

    @database_sync_to_async
    def getEscuelas(self):

        return serializers.serialize('json', Escuela.objects.all(), use_natural_foreign_keys=True, use_natural_primary_keys=True) 

         

    @database_sync_to_async
    def getOferentes(self):

        return serializers.serialize('json', Oferente.objects.all(), use_natural_foreign_keys=True, use_natural_primary_keys=True)


    def receive(self, text_data=None, bytes_data=None):
        jsonData = json.loads(text_data)

        if jsonData["entidad"] == 'escuela':
            escuela = Escuela.objects.get(codigo = jsonData['codigo'])
            escuela.lote = jsonData['nuevoValorLote']
            escuela.save()

        elif jsonData["entidad"] == 'oferente':
            oferente = Oferente.objects.get(cedula_rnc = jsonData['cedula_rnc'])
            oferente.lote_asignado = jsonData['nuevoValorLote']
            oferente.save()
    
    # @database_sync_to_async
    # def getOferente(self, valor):
    #     return Oferente.objects.get(cedula_rnc = valor)

    # @database_sync_to_async
    # def getEscuela(self, valor):
    #     return Escuela.objects.get(codigo = valor)

    
    async def disconnect(self, close_code):
        print("Se ha cerrado el websocket")

    async def send_message(self, event):  

        await self.send(text_data= event['text'])

    @receiver(post_save, sender=Escuela)
    def sendEscuela(sender, instance, created, **kwargs):

        fieldsNames = [f.name for f in Escuela._meta.fields]
        instanceDict = vars(instance)
        message = {}

        for field in fieldsNames:
            if field == 'provincia':
                message[field] = instanceDict['provincia']
            elif field == 'municipio':
                message[field] = instanceDict['municipio']
            else:
                message[field] = instanceDict[field]
        
        channel_layer = channels.layers.get_channel_layer()

        async_to_sync(channel_layer.send)(geoapp_instance.channel_name, {
        "type": "send.message",
        "text": json.dumps(message),
        })

    @receiver(post_save, sender=Oferente)
    def sendOferente(sender, instance, created, **kwargs):

        fieldsNames = [f.name for f in Oferente._meta.fields]
        instanceDict = vars(instance)
        message = {}

        for field in fieldsNames:
            if field == 'provincia':
                message[field] = instanceDict['provincia']
            elif field == 'municipio':
                message[field] = instanceDict['municipio']
            else:
                message[field] = instanceDict[field]
        
        channel_layer = channels.layers.get_channel_layer()


        async_to_sync(channel_layer.send)(geoapp_instance.channel_name, {
        "type": "send.message",
        "text": json.dumps(message),
        })

    @receiver(post_delete, sender=Escuela)
    def deleteEscuela(sender, instance, **kwargs):

        instanceDict = vars(instance)
        message = {'codigo': instanceDict['codigo'], 'accion': 'eliminar'}
        
        channel_layer = channels.layers.get_channel_layer()

        async_to_sync(channel_layer.send)(geoapp_instance.channel_name, {
        "type": "send.message",
        "text": json.dumps(message),
        })
        
    
    @receiver(post_delete, sender=Oferente)
    def deleteOferente(sender, instance, **kwargs):

        instanceDict = vars(instance)
        message = {'cedula_rnc': instanceDict['cedula_rnc'], 'accion': 'eliminar'}
        
        channel_layer = channels.layers.get_channel_layer()

        async_to_sync(channel_layer.send)(geoapp_instance.channel_name, {
        "type": "send.message",
        "text": json.dumps(message),
        })
        

import calendar
class CitasSaludEscolar(AsyncWebsocketConsumer):

    async def connect(self):

        await self.accept()

        global saludescolar_instance
        saludescolar_instance = self

        

    async def disconnect(self, close_code):
        print("Se ha cerrado el websocket")


    async def send_message(self, event):  

        print("mensaje enviado")

    async def receive(self, text_data=None, bytes_data=None):

        data = json.loads(text_data)

        if data["accion"] == "cambiar-calendario":
            
            year = int(data["selected-year"])
            month = int(data["selected-month"])
            month_tuple = calendar.monthrange(year, month) #tupla con dia en el cual comienza el mes (el 0 es lunes) y cantidad de dias que tienes el mes
            days_in_month = month_tuple[1] 
            days_list = []
            
            for day in range(1, days_in_month + 1):
                calendar_object = {
                    "number_day_week": calendar.weekday(year, month, day), #0 = lunes, 1 = martes, etc ...
                    "number_day_calendar": day

                }

                days_list.append(calendar_object)
            
            res = json.dumps({
                "accion": "cambiar-calendario",
                "days_list": days_list

            })

            await self.send(res)

        

      
    
