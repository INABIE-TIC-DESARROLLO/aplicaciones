from django.db import models
from colorfield.fields import ColorField

# Create your models here.
class Escuela(models.Model):
    codigo = models.CharField("Código Centro", max_length=5, primary_key=True)
    nombre = models.CharField("Nombre", max_length=255, null=True, blank=True)
    provincia = models.ForeignKey("AdministracionSistema.Provincia", verbose_name="Provincia", on_delete=models.CASCADE, null=True, blank=True)
    municipio = models.ForeignKey("AdministracionSistema.Municipio", verbose_name="Municipio", on_delete=models.CASCADE, null=True, blank=True)
    regional = models.CharField("Regional", max_length=2, null=True, blank=True)
    distrito = models.CharField("Distrito", max_length=4, null=True, blank=True)
    direccion = models.CharField("Dirección", max_length=255, null=True, blank=True)
    latitud = models.FloatField("Latitud", null=True, blank=True)
    longitud = models.FloatField("Longitud", null=True, blank=True)
    cantidad_primaria = models.IntegerField("Cantidad Primaria", null=True, blank=True)
    cantidad_secundaria = models.IntegerField("Cantidad Secundaria", null=True, blank=True)
    cantidad_matriculados = models.IntegerField("Cantidad Matriculados", null=True, blank=True)
    servicio = models.CharField("Servicio", max_length=255, null=True, blank=True)
    lote = models.CharField("Lote", max_length=255, null=True, blank=True)
    condicion_especial = models.CharField("Condición Especial", max_length=255, null=True, blank=True)
    color_relleno_marcador = ColorField(verbose_name = "Color de relleno del marcador", max_length=50, null= True, blank= True, format="hexa")
    color_borde_marcador = ColorField(verbose_name = "Color de borde del marcador", max_length=50, null=True, blank=True, format="hexa")

    def save(self):

        self.provincia = self.municipio.provincia_perteneciente if self.municipio is not None else self.provincia
        self.regional = self.municipio.provincia_perteneciente.regional_asociada if self.municipio is not None else self.regional
        self.distrito = self.municipio.distrito_asociado if self.municipio is not None else self.distrito

        return super(Escuela, self).save()

    def __str__(self):
        return self.nombre


class Oferente(models.Model):
    cedula_rnc = models.CharField("Cédula o RNC", max_length=11, primary_key=True)
    nombre = models.CharField("Nombre", max_length=255, null=True, blank=True)
    tipo_persona = models.CharField("Tipo persona", max_length=25, choices=[('FISICA', 'FISICA'), ('JURIDICA', 'JURIDICA')], null=True, blank=True)
    provincia = models.ForeignKey("AdministracionSistema.Provincia", verbose_name="Provincia", on_delete=models.CASCADE, null=True, blank=True)
    municipio = models.ForeignKey("AdministracionSistema.Municipio", verbose_name="Municipio", on_delete=models.CASCADE, null=True, blank=True)
    regional = models.CharField("Regional", max_length=2, null=True, blank=True)
    distrito = models.CharField("Distrito", max_length=4, null=True, blank=True)
    direccion = models.CharField("Dirección", max_length=255, null=True, blank=True)
    latitud = models.FloatField("Latitud", null=True, blank=True)
    longitud = models.FloatField("Longitud", null=True, blank=True)
    tiempo_total_a_escuelas = models.IntegerField("Tiempo total a escuelas (min)", null=True, blank=True)
    distancia_total_a_escuelas = models.IntegerField("Distancia total a escuelas (km)", null=True, blank=True)
    lote_asignado = models.CharField("Lote asignado", max_length=255, null=True, blank=True)
    condicion_especial = models.CharField("Condición Especial", max_length=255, null=True, blank=True)
    color_relleno_marcador = ColorField(verbose_name = "Color de relleno del marcador", max_length=50, null= True, blank= True, format="hexa")
    color_borde_marcador = ColorField(verbose_name = "Color de borde del marcador", max_length=50, null=True, blank=True, format="hexa")

    def save(self):

        self.provincia = self.municipio.provincia_perteneciente if self.municipio is not None else self.provincia
        self.regional = self.municipio.provincia_perteneciente.regional_asociada if self.municipio is not None else self.regional
        self.distrito = self.municipio.distrito_asociado if self.municipio is not None else self.distrito

        return super(Oferente, self).save()

    def __str__(self):
        return self.nombre

    


    
class ArchivosExcel(models.Model):
    nombre = models.CharField("Nombre Archivo", max_length=255, default="Archivo Excel")
    fecha = models.DateTimeField("Fecha de subida", auto_now=True, auto_now_add=False)
    archivo = models.FileField("Archivos excel compras y contrataciones", upload_to=r'C:\Users\opdbd07\Desktop\INABIE_APPS_01\INABIE_Dev_Env\Lib\site-packages\django\bin\INABIE_TIC\ComprasYContrataciones\archivos_excel', max_length=2000)

    def __str__(self):
        return self.nombre
