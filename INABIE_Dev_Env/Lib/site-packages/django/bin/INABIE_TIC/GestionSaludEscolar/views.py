from gettext import find
from django.shortcuts import render, redirect
from datetime import datetime
import calendar
import json


# Create your views here.

def formulario_citas(request):
    if request.method == "GET":
        actual_year = datetime.today().year
        next_year = actual_year + 1
        actual_month = datetime.today().month
        month_tuple = calendar.monthrange(actual_year, actual_month) #tupla con dia en el cual comienza el mes (el 0 es lunes) y cantidad de dias que tienes el mes
        days_in_actual_month = month_tuple[1] 
        days_list = []
        
        for day in range(1, days_in_actual_month + 1):
            calendar_object = {
                "number_day_week": calendar.weekday(actual_year, actual_month, day), #0 = lunes, 1 = martes, etc ...
                "number_day_calendar": day

            }

            days_list.append(calendar_object)

        return render(request, '../templates/formulario_citas.html', {"actual_year": actual_year, "selected_year": actual_year, "next_year": next_year, "days_list": days_list, "actual_month": actual_month})
    
    elif request.method == "POST":
        

        if request.POST["accion"] == "cambiar-calendario":
            actual_year = datetime.today().year
            next_year = actual_year + 1
            actual_month = datetime.today().month
            year = int(request.POST["year"])
            month = int(request.POST["month"])
            month_tuple = calendar.monthrange(year, month) #tupla con dia en el cual comienza el mes (el 0 es lunes) y cantidad de dias que tienes el mes
            days_in_month = month_tuple[1] 
            days_list = []
            first_day_month = {} #el primer dia del mes. Esto es para luego colocar el orden d elos dias en el frontend, segun el nombre (lunes, martes, etc)
            
            for day in range(1, days_in_month + 1):
                calendar_object = {
                    "number_day_week": calendar.weekday(year, month, day), #0 = lunes, 1 = martes, etc ...
                    "number_day_calendar": day

                }

                if calendar_object["number_day_calendar"] == 1:
                    first_day_month = calendar_object

                days_list.append(calendar_object)


            
            days_before_first_day = []
            for day_before in range(0, first_day_month["number_day_week"]):
                days_before_first_day.append("espacio_en_blanco")


            return render(request, '../templates/formulario_citas.html', {"actual_year": actual_year, "selected_year": year, "next_year": next_year, "days_list": days_list, "actual_month": month, "days_before_first_day": days_before_first_day})
    
