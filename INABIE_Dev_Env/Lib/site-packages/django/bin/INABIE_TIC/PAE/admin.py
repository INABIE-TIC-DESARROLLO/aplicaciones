from django.contrib import admin, messages
from django.http import FileResponse, HttpResponse
from .models import Oferente, Escuela, ArchivosExcel, Lote, Proceso, DirectorCentroEducativo, PeriodoEscolar, Tanda, NivelGrado, MatriculaCEPorNivel, MatriculaCEPorTanda, LoteEscolar, TipoProducto, Adjudicacion, ConsultaEntregaRaciones
import openpyxl
from AdministracionSistema.admin import agregarCeros
from AdministracionSistema.models import Provincia, Municipio
import datetime
from django.contrib.auth.models import User, UserManager



@admin.action(description="Cargar Escuelas")
def cargarEscuelas(modelAdmin, request, queryset):

    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        escuelas = [e.codigo for e in Escuela.objects.all()]

        for escuela in archivo.active.values:
            
            codigo = agregarCeros(escuela[0], 5)

            if codigo not in escuelas:
                nombre = escuela[1].upper()

                try: #evitar excepciones por busqueda de valores nulos en el filtro
                    provincia_upper = escuela[2].upper() if escuela[2] is not None else None
                    provincia = Provincia.objects.filter(nombre = provincia_upper)[0]

                    if provincia == None:
                        provincia = Provincia.objects.filter(nombre = 'NO IDENTIFICADA')[0]

                except:
                    provincia = Provincia.objects.filter(nombre = 'NO IDENTIFICADA')[0]
                
                try:
                    municipio_upper = escuela[3].upper() if escuela[3] is not None else None
                    municipio = Municipio.objects.filter(nombre = municipio_upper)[0]

                    if municipio == None:
                        municipio = Municipio.objects.filter(nombre = 'NO IDENTIFICADO')[0]
                except:
                    municipio = Municipio.objects.filter(nombre = 'NO IDENTIFICADO')[0]

                regional = escuela[4]
                distrito = escuela[5]
                direccion = escuela[6].upper() if escuela[6] else None

                if type(escuela[7]) is float:
                    latitud = escuela[7]
                else:
                    latitud = 17.785445
                
                if type(escuela[8]) is float:
                    longitud = escuela[8]
                else:
                    longitud = -70.238725
                
                cantidad_primaria = escuela[9]
                cantidad_secundaria = escuela[10]
                cantidad_matriculados = escuela[11]


                # try:
                #     oferente_asignado = Oferente.objects.filter(cedula_rnc = escuela[12])[0]
                # except:
                #     oferente_asignado = None
                
                modalidad = escuela[12]
                lote = escuela[13] if escuela[13] is not None else None
                condicion_especial = escuela[14] if escuela[14] is not None else None

                nueva_escuela = Escuela(
                    codigo = codigo,
                    nombre = nombre,
                    provincia = provincia,
                    municipio = municipio,
                    regional = regional,
                    distrito = distrito,
                    direccion = direccion,
                    latitud = latitud,
                    longitud = longitud,
                    cantidad_primaria = cantidad_primaria,
                    cantidad_secundaria = cantidad_secundaria,
                    cantidad_matriculados = cantidad_matriculados,
                    modalidad = modalidad,
                    lote = lote,
                    condicion_especial = condicion_especial
                )

                nueva_escuela.save()

                escuelas.append(codigo) #para que no se carguen los que ya se han cargado

@admin.action(description="Cargar Oferentes")
def cargarOferentes(modelAdmin, request, queryset):

    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        oferentes = [o.cedula_rnc for o in Oferente.objects.all()]

        for oferente in archivo.active.values:
            
            cedula_rnc = oferente[0]

            if cedula_rnc not in oferentes:
                nombre = oferente[1].upper()

                tipo_persona = oferente[2]

                try: #evitar excepciones por busqueda de valores nulos en el filtro
                    provincia_upper = oferente[3].upper() if oferente[3] is not None else None
                    provincia = Provincia.objects.filter(nombre = provincia_upper)[0]

                    if provincia == None:
                        provincia = Provincia.objects.filter(nombre = 'NO IDENTIFICADA')[0]

                except:
                    provincia = Provincia.objects.filter(nombre = 'NO IDENTIFICADA')[0]
                
                try:
                    municipio_upper = oferente[4].upper() if oferente[4] is not None else None
                    municipio = Municipio.objects.filter(nombre = municipio_upper)[0]

                    if municipio == None:
                        municipio = Municipio.objects.filter(nombre = 'NO IDENTIFICADO')[0]
                except:
                    municipio = Municipio.objects.filter(nombre = 'NO IDENTIFICADO')[0]

                regional = oferente[5]
                distrito = oferente[6]
                direccion = oferente[7].upper() if oferente[7] else None
                latitud = oferente[8]
                longitud = oferente[9]
                tiempo_total_a_escuelas = oferente[10]
                distancia_total_a_escuelas = oferente[11]
                condicion_especial = oferente[12]
                lote_asignado = oferente[13]

                nuevo_oferente = Oferente(
                    cedula_rnc = cedula_rnc,
                    nombre = nombre,
                    tipo_persona = tipo_persona,
                    provincia = provincia,
                    municipio = municipio,
                    regional = regional,
                    distrito = distrito,
                    direccion = direccion,
                    latitud = latitud,
                    longitud = longitud,
                    tiempo_total_a_escuelas = tiempo_total_a_escuelas,
                    distancia_total_a_escuelas = distancia_total_a_escuelas,
                    condicion_especial = condicion_especial,
                    lote_asignado = lote_asignado
                )

                nuevo_oferente.save()

                oferentes.append(cedula_rnc) #para que no se carguen los que ya se han cargado

@admin.action(description='Descargar seleccionados como archivo de excel')
def descargarExcelEscuelas(modeladmin, request, queryset):
    hojaExcel = openpyxl.Workbook()


    for escuela in queryset:
        fila = []
        for propiedadesEscuela in vars(escuela).items(): #para obtener primera fila, es decir, nombre de las columnas
            fila.append(propiedadesEscuela[0])
        
        fila.pop(0)
        hojaExcel.active.append(fila)   
        break

    for escuela in queryset.values():
        fila = []

        escuelaObtenida = Escuela.objects.select_related('provincia', 'municipio').get(codigo = escuela['codigo'])

        codigo = escuelaObtenida.codigo
        nombre = escuelaObtenida.nombre
        provincia = escuelaObtenida.provincia.nombre
        municipio = escuelaObtenida.municipio.nombre
        regional = escuelaObtenida.regional
        distrito = escuelaObtenida.distrito
        direccion = escuelaObtenida.direccion
        latitud = escuelaObtenida.latitud
        longitud = escuelaObtenida.longitud
        cantidad_primaria = escuelaObtenida.cantidad_primaria
        cantidad_secundaria = escuelaObtenida.cantidad_secundaria
        cantidad_matriculados = escuelaObtenida.cantidad_matriculados
        modalidad = escuelaObtenida.modalidad
        lote = escuelaObtenida.lote
        condicion_especial = escuelaObtenida.condicion_especial
        color_relleno_marcador = escuelaObtenida.color_relleno_marcador
        color_borde_marcador = escuelaObtenida.color_borde_marcador
        

        valores = [codigo, nombre, provincia, municipio, regional, distrito, direccion, latitud, longitud, cantidad_primaria, 
                    cantidad_secundaria, cantidad_matriculados, modalidad, lote, condicion_especial, color_relleno_marcador, color_borde_marcador]

        for valorPropiedad in valores:
            # print(valorPropiedad)


            if type(valorPropiedad) is datetime.datetime:
                fila.append(valorPropiedad.strftime("%m/%d/%Y, %H:%M:%S"))
            else:
                fila.append(valorPropiedad)
            
                
        hojaExcel.active.append(fila)

    fechaYHoraActual = datetime.datetime.now().strftime("%m-%d-%Y_%H-%M-%S")

    hojaExcel.save(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/PAE/archivos_excel/escuelas_{fechaYHoraActual}.xlsx')

    excelEquipos = open(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/PAE/archivos_excel/escuelas_{fechaYHoraActual}.xlsx', 'rb')
    

    response = HttpResponse(excelEquipos, headers= {
        'Content-Type': 'application/vnd.ms-excel',
        'Content-Disposition': 'attachment; filename="escuelas_{fechaYHoraActual}.xlsx"'.format(fechaYHoraActual = fechaYHoraActual)
    })

    return response

@admin.action(description='Descargar seleccionados como archivo de excel')
def descargarExcelOferentes(modeladmin, request, queryset):
    hojaExcel = openpyxl.Workbook()


    for oferente in queryset:
        fila = []
        for propiedadesOferente in vars(oferente).items(): #para obtener primera fila, es decir, nombre de las columnas
            fila.append(propiedadesOferente[0])
        
        fila.pop(0)
        hojaExcel.active.append(fila)   
        break

    for oferente in queryset.values():
        fila = []

        oferenteObtenido = Oferente.objects.select_related('provincia', 'municipio').get(cedula_rnc = oferente['cedula_rnc'])

        cedula_rnc = oferenteObtenido.cedula_rnc
        nombre = oferenteObtenido.nombre
        tipo_persona = oferenteObtenido.tipo_persona
        provincia = oferenteObtenido.provincia.nombre
        municipio = oferenteObtenido.municipio.nombre
        regional = oferenteObtenido.regional
        distrito = oferenteObtenido.distrito
        direccion = oferenteObtenido.direccion
        latitud = oferenteObtenido.latitud
        longitud = oferenteObtenido.longitud
        tiempo_total_a_escuelas = oferenteObtenido.tiempo_total_a_escuelas
        distancia_total_a_escuelas = oferenteObtenido.distancia_total_a_escuelas
        lote_asignado = oferenteObtenido.lote_asignado
        condicion_especial = oferenteObtenido.condicion_especial
        color_relleno_marcador = oferenteObtenido.color_relleno_marcador
        color_borde_marcador = oferenteObtenido.color_borde_marcador
        

        valores = [cedula_rnc, nombre, provincia, municipio, regional, distrito, direccion, latitud, longitud, tiempo_total_a_escuelas, 
                    distancia_total_a_escuelas, lote_asignado, condicion_especial, color_relleno_marcador, color_borde_marcador]

        for valorPropiedad in valores:
            # print(valorPropiedad)


            if type(valorPropiedad) is datetime.datetime:
                fila.append(valorPropiedad.strftime("%m/%d/%Y, %H:%M:%S"))
            else:
                fila.append(valorPropiedad)
            
                
        hojaExcel.active.append(fila)

    fechaYHoraActual = datetime.datetime.now().strftime("%m-%d-%Y_%H-%M-%S")

    hojaExcel.save(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/PAE/archivos_excel/oferentes_{fechaYHoraActual}.xlsx')

    excelEquipos = open(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/PAE/archivos_excel/oferentes_{fechaYHoraActual}.xlsx', 'rb')
    

    response = HttpResponse(excelEquipos, headers= {
        'Content-Type': 'application/vnd.ms-excel',
        'Content-Disposition': 'attachment; filename="oferentes_{fechaYHoraActual}.xlsx"'.format(fechaYHoraActual = fechaYHoraActual)
    })

    return response

@admin.action(description="Lotificar Oferentes")
def lotificarOferentes(modelAdmin, request, queryset):
    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        for oferente in archivo.active.values:
            
            try:

                cedula_rnc = oferente[0]
                oferente = Oferente.objects.filter(cedula_rnc = cedula_rnc)

                oferente.update(lote_asignado = oferente[1])
            except:
                continue

@admin.action(description="Lotificar Escuelas")
def lotificarEscuelas(modelAdmin, request, queryset):
    if len(queryset) > 1:
        admin.ModelAdmin.message_user(request=request, modelAdmin=modelAdmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:
        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        for escuela in archivo.active.values:
            
            try:

                codigo = agregarCeros(escuela[0], 5)
                escuela = Escuela.objects.filter(codigo = codigo)

                escuela.update(lote = escuela[1])
            except:
                continue

@admin.action(description='Crear usuarios de directores de centros educativos')
def crear_usuarios_directores(modeladmin, request, queryset):
    for escuela in queryset:
        if escuela.codigo_plantel is not None:
            try:
                user = User.objects.get(username = escuela.codigo) #si no lo encuentra lanza un error y va al except
                
                                

            except:
                user = User.objects.create_user(escuela.codigo, '', f"inabie-{escuela.codigo}") #usuario, email, contraseña... se guarda automaticamente

        else:
            continue
        


class EscuelaAdmin(admin.ModelAdmin):
    campos = [f.name for f in Escuela._meta.fields]
    list_display = tuple(campos)
    search_fields = ('codigo', 'nombre')
    # list_filter = ('provincia', 'municipio', 'regional', 'distrito', 'modalidad', 'condicion_especial')
    actions = [descargarExcelEscuelas, crear_usuarios_directores]

class OferenteAdmin(admin.ModelAdmin):
    campos = [f.name for f in Oferente._meta.fields]
    list_display = tuple(campos)
    list_filter = ('provincia', 'municipio', 'regional', 'distrito')
    search_fields = ('cedula_rnc', 'nombre', 'tipo_persona',
                     'provincia__nombre', 'municipio__nombre', 'regional',
                     'distrito', 'direccion', 'latitud', 'longitud',
                     'tiempo_total_a_escuelas', 'distancia_total_a_escuelas', 'condicion_especial')
    readonly_fields = ('tiempo_total_a_escuelas', 'distancia_total_a_escuelas')
    actions = [descargarExcelOferentes]

class LoteEscolarAdmin(admin.ModelAdmin):
    campos = [f.name for f in LoteEscolar._meta.fields]
    list_display = tuple(campos)
    list_filter = ('lote__tipo_producto', 'lote__provincia__nombre', 'lote__numero')
    search_fields = ('codigo_centro_escolar__codigo', 'codigo_centro_escolar__nombre', 'lote__numero', 'lote__provincia__nombre')

class LoteAdmin(admin.ModelAdmin):
    campos = [f.name for f in Lote._meta.fields]
    list_display = tuple(campos)
    list_filter = ('tipo_producto', 'provincia__nombre', 'periodo_escolar__desde', 'periodo_escolar__hasta')
    search_fields = ('numero', 'proceso__pk_id', 'provincia__nombre')
    

class ArchivosExcelComprasAdmin(admin.ModelAdmin):

    list_display = ('nombre', 'fecha', 'archivo')
    search_fields = ('nombre', 'fecha')
    actions = [cargarEscuelas, cargarOferentes]

class ConsultaEntregaRacionesAdmin(admin.ModelAdmin):

    list_display = ("codigo_ce", ) + tuple([m.name for m in ConsultaEntregaRaciones._meta.fields])
    list_filter = ("provincia_ce", "municipio_ce", "distrito_ce", "servicio_modalidad_ce", "tanda_ce", "producto_alimento_ce", "periodo_escolar_desde", "periodo_escolar_hasta")
    search_fields = ('codigo_ce', 'nombre_ce', 'cedula_oferente', 'nombre_oferente', 'producto_alimento_ce', 'tanda_ce')


# Register your models here.
admin.site.register(Oferente, OferenteAdmin)
admin.site.register(Escuela, EscuelaAdmin)
admin.site.register(Lote, LoteAdmin)
admin.site.register(DirectorCentroEducativo)
admin.site.register(PeriodoEscolar)
admin.site.register(Tanda)
admin.site.register(NivelGrado)
admin.site.register(MatriculaCEPorNivel)
admin.site.register(MatriculaCEPorTanda)
admin.site.register(LoteEscolar, LoteEscolarAdmin)
admin.site.register(TipoProducto)
admin.site.register(Adjudicacion)
admin.site.register(Proceso)
admin.site.register(ArchivosExcel, ArchivosExcelComprasAdmin)
# admin.site.register(ConsultaEntregaRaciones, ConsultaEntregaRacionesAdmin)