from django.db import models
from colorfield.fields import ColorField

# Create your models here.
class DirectorCentroEducativo(models.Model):
    cedula = models.CharField("Cédula", max_length=11, primary_key=True)
    nombre = models.CharField("Nombre", max_length=70)
    telefono = models.CharField("Teléfono", max_length=14)
    email = models.EmailField("Email", max_length=100, null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario creador
    fecha_hora_creacion = models.DateTimeField("Fecha/Hora Creación", auto_now=True, null=True, blank=True)
    modificado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario modificador
    fecha_hora_modificacion = models.DateTimeField("Fecha/Hora Modificación", auto_now=True, null=True, blank=True)
    activo = models.BooleanField("Activo/Inactivo", default=True) #activo o inactivo


    def __str__(self):
        return self.nombre + ' - ' + self.cedula

class Regional(models.Model):
    id = models.IntegerField("Id")
    regional_id = models.CharField("Regional Id", max_length=2, primary_key=True, db_column="regional_id")
    regional = models.CharField("Regional", max_length=100, null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank=True)
    creado_fecha_hora = models.DateTimeField("Creado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank=True)
    actualizado_fecha_hora = models.DateTimeField("Actualizado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    estado_id = models.IntegerField("Estado: activo/inactivo")

    class Meta:
        managed = False
        db_table = 'minerd_regionales'

class Distrito(models.Model):
    distrito_id = models.IntegerField("id", db_column="distrito_id")
    regional_id = models.CharField("Regional id", max_length=2, db_column="regional_id")
    distrito_educativo_id = models.CharField("Distrito id", max_length=4, primary_key=True, db_column="distrito_educativo_id")
    distrito_educativo = models.CharField("Distrito", max_length=100, null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank=True)
    creado_fecha_hora = models.DateTimeField("Creado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank=True)
    actualizado_fecha_hora = models.DateTimeField("Actualizado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    estado_id = models.IntegerField("Estado: activo/inactivo")


    class Meta:
        managed = False
        db_table = 'minerd_distritos_educativos'

class Escuela(models.Model): #centro educativo
    codigo_centro_id = models.IntegerField("Id del centro", db_column="codigo_centro_id")
    centro_codigo = models.CharField("Código Centro", max_length=5, primary_key=True)
    regional_id = models.ForeignKey("PAE.Regional", verbose_name="Regional id", on_delete=models.CASCADE, null=True, blank=True, db_column="regional_id")
    distrito_educativo_id = models.ForeignKey("PAE.Distrito", verbose_name="Distrito id", on_delete=models.CASCADE, null=True, blank=True, db_column="distrito_educativo_id")
    regional = models.CharField("Regional", max_length=255, null=True, blank=True)
    distrito_educativo = models.CharField("Distrito", max_length=255, null=True, blank=True)
    plantel_codigo = models.CharField("Codigo de plantel", max_length=255, null=True, blank=True)
    nombre = models.CharField("Nombre CE", max_length=255, null=True, blank=True)
    sector = models.CharField("Sector", max_length=50, null=True, blank=True)
    estado = models.CharField("Estado", max_length=50, null=True, blank=True)
    latitud = models.FloatField("Latitud", null=True, blank=True)
    longitud = models.FloatField("Longitud", null=True, blank=True)
    provincia = models.CharField("Provincia", max_length=255, null=True, blank=True)
    municipio = models.CharField("Municipio", max_length=255, null=True, blank=True)
    distrito_municipal = models.CharField("Distrito Municipal", max_length=255, null=True, blank=True)
    seccion_paraje = models.CharField("Seccion o paraje", max_length=255, null=True, blank=True)
    barrio = models.CharField("Barrio", max_length=255, null=True, blank=True)
    direccion = models.CharField("Direccion", max_length=255, null=True, blank=True)
    telefono = models.CharField("Telefono", max_length=255, null=True, blank=True)
    director = models.CharField("Director", max_length=255, null=True, blank=True)
    director_telefono = models.CharField("Telefono Director", max_length=255, null=True, blank=True)
    otro_contacto = models.CharField("Otro contacto", max_length=255, null=True, blank=True)
    otro_contacto_telefono = models.CharField("Telefono del otro contacto", max_length=255, null=True, blank=True)
    centro_nombre = models.CharField("Centro nombre", max_length=100, null=True, blank=True)
    centro_sector = models.CharField("Centro sector", max_length=100, null=True, blank=True)
    modalidad_pae = models.CharField("Modalidad PAE", max_length=100, null=True, blank=True)
    niveles = models.CharField("Niveles", max_length=100, null=True, blank=True)
    zona = models.CharField("Zona", max_length=100, null=True, blank=True)
    tanda = models.CharField("Tanda", max_length=100, null=True, blank=True)
    matricula_inical_y_primaria = models.IntegerField("Matricula inicial y primaria", null=True, blank=True)
    matricula_inicial = models.IntegerField("Matricula inicial", null=True, blank=True)
    matricula_primaria = models.IntegerField("Matricula primaria", null=True, blank=True)
    matricula_secundaria = models.IntegerField("Matricula Secundaria", null=True, blank=True)
    personal_docente = models.IntegerField("Personal Docente", null=True, blank=True)
    personal_administrativo = models.IntegerField("Personal Administrativo", null=True, blank=True)
    personal_docente_administrativo = models.IntegerField("Personal docente y administrativo", null=True, blank=True)
    total_beneficiarios = models.IntegerField("Total beneficiarios", null=True, blank=True)
    matricula_total = models.IntegerField("Matricula total", null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank=True)
    creado_fecha_hora = models.DateTimeField("Creado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank=True)
    actualizado_fecha_hora = models.DateTimeField("Actualizado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    estado_id = models.IntegerField("Estado: activo/inactivo")
    
    class Meta:
        managed = False
        db_table = 'minerd_centros_educativos'



class Oferente(models.Model):
    cedula_rnc = models.CharField("Cédula o RNC", max_length=11, primary_key=True)
    nombre = models.CharField("Nombre", max_length=255, null=True, blank=True)
    tipo_persona = models.CharField("Tipo persona", max_length=25, choices=[('FISICA', 'FISICA'), ('JURIDICA', 'JURIDICA')], null=True, blank=True)
    registro_proveedor = models.CharField("Registro Proveedor", max_length=255, null=True, blank=True)
    registro_mercantil = models.CharField("Registro Marcantil", max_length=255, null=True, blank=True)
    provincia = models.ForeignKey("AdministracionSistema.Provincia", verbose_name="Provincia", on_delete=models.CASCADE, null=True, blank=True)
    municipio = models.ForeignKey("AdministracionSistema.Municipio", verbose_name="Municipio", on_delete=models.CASCADE, null=True, blank=True)
    regional = models.CharField("Regional", max_length=2, null=True, blank=True)
    distrito = models.CharField("Distrito", max_length=4, null=True, blank=True)
    direccion = models.CharField("Direccion", max_length=255, null=True, blank=True)
    telefono = models.CharField("Teléfono", max_length=14, null=True, blank=True)
    email = models.EmailField("Email", max_length=254, null=True, blank=True)
    domicilio_local = models.CharField("Domicilio Local", max_length=255, null=True, blank=True)
    numero_contrato = models.CharField("Número de contrato", max_length=15, null=True, blank=True)
    representante = models.CharField("Representante", max_length=70, null=True, blank=True)
    cedula_representante = models.CharField("Cédula Representante", max_length=11, null=True, blank=True)
    telefono_representante = models.CharField("Teléfono Representante", max_length=14, null=True, blank=True)
    direccion_representante = models.CharField("Dirección Representante", max_length=255, null=True, blank=True)
    latitud = models.FloatField("Latitud", null=True, blank=True)
    longitud = models.FloatField("Longitud", null=True, blank=True)
    lote_asignado = models.CharField("Lote asignado", max_length=255, null=True, blank=True)
    tiempo_total_a_escuelas = models.IntegerField("Tiempo total a escuelas (min)", null=True, blank=True)
    distancia_total_a_escuelas = models.IntegerField("Distancia total a escuelas (km)", null=True, blank=True)
    condicion_especial = models.CharField("Condición Especial", max_length=255, null=True, blank=True)
    color_relleno_marcador = ColorField(verbose_name = "Color de relleno del marcador", max_length=50, null= True, blank= True, format="hexa")
    color_borde_marcador = ColorField(verbose_name = "Color de borde del marcador", max_length=50, null=True, blank=True, format="hexa")
    creado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario creador
    fecha_hora_creacion = models.DateTimeField("Fecha/Hora Creación", auto_now=True, null=True, blank=True)
    modificado_por = models.CharField("Modificado por", max_length=150, null=True, blank=True) #usuario modificador
    fecha_hora_modificacion = models.DateTimeField("Fecha/Hora Modificación", auto_now=True, null=True, blank=True)
    activo = models.BooleanField("Activo/Inactivo", default=True) #activo o inactivo

    def save(self):

        self.provincia = self.municipio.provincia_perteneciente if self.municipio is not None else self.provincia
        self.regional = self.municipio.provincia_perteneciente.regional_asociada if self.municipio is not None else self.regional
        self.distrito = self.municipio.distrito_asociado if self.municipio is not None else self.distrito

        return super(Oferente, self).save()

    def __str__(self):
        return self.nombre + ' - ' + self.cedula_rnc


class PeriodoEscolar(models.Model):
    desde = models.IntegerField("Desde")
    hasta = models.IntegerField("Hasta")
    descripcion = models.TextField("Descripción", null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario creador
    fecha_hora_creacion = models.DateTimeField("Fecha/Hora Creación", auto_now=True, null=True, blank=True)
    modificado_por = models.CharField("Creado por", max_length=150) #usuario modificador
    fecha_hora_modificacion = models.DateTimeField("Fecha/Hora Modificación", auto_now=True)
    activo = models.BooleanField("Activo/Inactivo") #activo o inactivo

class Tanda(models.Model):
    nombre = models.CharField("Nombre", max_length=150)

class NivelGrado(models.Model):
    nombre = models.CharField("Nombre", max_length=150)

class MatriculaCEPorTanda(models.Model):
    codigo_centro_escolar = models.ForeignKey("PAE.Escuela", verbose_name="Centro Escolar", on_delete=models.CASCADE)
    tanda = models.ForeignKey("PAE.Tanda", verbose_name="Tanda", on_delete=models.CASCADE)
    matricula_tanda = models.IntegerField("Matricula de la tanda")

class MatriculaCEPorNivel(models.Model):
    codigo_centro_escolar = models.ForeignKey("PAE.Escuela", verbose_name="Centro Escolar", on_delete=models.CASCADE)
    nivel_grado = models.ForeignKey("PAE.NivelGrado", verbose_name="Nivel", on_delete=models.CASCADE)
    matricula_nivel = models.IntegerField("Matricula del nivel/grado")

class Lote(models.Model):
    periodo_escolar = models.ForeignKey("PAE.PeriodoEscolar", verbose_name="Periodo", on_delete=models.CASCADE)
    proceso = models.ForeignKey("PAE.Proceso", verbose_name="Proceso", on_delete=models.CASCADE, null=True, blank=True)
    provincia = models.ForeignKey("AdministracionSistema.Provincia", verbose_name="Provincia", on_delete=models.CASCADE)
    numero = models.CharField("Número", max_length=150)
    tipo_producto = models.ForeignKey("PAE.TipoProducto", verbose_name="Tipo Producto", on_delete=models.CASCADE)
    adjudicacion = models.ForeignKey("PAE.Adjudicacion", verbose_name="Adjudicacion", on_delete=models.CASCADE, null=True, blank=True)
    descripcion = models.TextField("Descripcion", null=True, blank=True)
    matricula_total = models.IntegerField("Matricula Total", null=True, blank=True, default=0)
    personal_docente_total = models.IntegerField("Personal Docente total", null=True, blank=True, default=0)
    personal_administrativo_total = models.IntegerField("Personal Administrativo Total", null=True, blank=True, default=0)
    raciones_total = models.IntegerField("Raciones Total", null=True, blank=True, default=0)
    valor_subtotal = models.FloatField("Subtotal", null=True, blank=True)
    valor_itbis = models.FloatField("ITBIS", null=True, blank=True)
    valor_total = models.FloatField("Total", null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario creador
    fecha_hora_creacion = models.DateTimeField("Fecha/Hora Creación", auto_now=True, null=True, blank=True)
    modificado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario modificador
    fecha_hora_modificacion = models.DateTimeField("Fecha/Hora Modificación", auto_now=True, null=True, blank=True)
    activo = models.BooleanField("Activo/Inactivo", default=True) #activo o inactivo

    class Meta:
        unique_together = ['periodo_escolar', 'provincia', 'numero']

    def __str__(self) -> str:
        return f'{self.proceso}-{self.numero}'

class TipoProducto(models.Model):
    nombre = models.CharField("Nombre", max_length=255)

    def __str__(self) -> str:
        return self.nombre

class LoteEscolar(models.Model):
    lote = models.ForeignKey("PAE.Lote", verbose_name="Lote", on_delete=models.CASCADE)
    codigo_centro_escolar = models.ForeignKey("PAE.Escuela", verbose_name="Centro Escolar", on_delete=models.CASCADE)
    matricula_centro = models.IntegerField("Matricula del Centro")
    personal_docente = models.IntegerField("Personal Docente")
    personal_administrativo = models.IntegerField("Personal Administrativo")
    raciones =  models.IntegerField("Raciones totales") #es la suma de la matricula, personal docente y personal administrativo
    raciones_monto_subtotal = models.IntegerField("Subtotal Raciones", null=True, blank=True)
    raciones_monto_itbis = models.IntegerField("ITBIS Raciones", null=True, blank=True)
    raciones_monto_total = models.IntegerField("Monto/Valor Raciones", null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario creador
    fecha_hora_creacion = models.DateTimeField("Fecha/Hora Creación", auto_now=True, null=True, blank=True)
    modificado_por = models.CharField("Creado por", max_length=150, null=True, blank=True) #usuario modificador
    fecha_hora_modificacion = models.DateTimeField("Fecha/Hora Modificación", auto_now=True, null=True, blank=True)
    activo = models.BooleanField("Activo/Inactivo", default=True) #activo o inactivo

class Adjudicacion(models.Model):
    proceso_compra_id = models.BigIntegerField("Proceso de compras ID")
    cedula_rnc_proveedor = models.ForeignKey("PAE.Oferente", verbose_name="Cédula/RNC Proveedor", on_delete=models.CASCADE)
    fecha_hora_adjudicacion = models.DateTimeField("Fecha/Hora Adjudicación", auto_now=True)
    oferta_id = models.BigIntegerField("Oferta ID")
    nota = models.TextField("Nota", null=True, blank=True)

    def __str__(self) -> str:
        return f'{self.proceso_compra_id} - {self.cedula_rnc_proveedor}'
    
class ArchivosExcel(models.Model):
    nombre = models.CharField("Nombre Archivo", max_length=255, default="Archivo Excel")
    fecha = models.DateTimeField("Fecha de subida", auto_now=True, auto_now_add=False)
    archivo = models.FileField("Archivos excel compras y contrataciones", upload_to=r'C:\Users\opdbd07\Desktop\INABIE_APPS_01\INABIE_Dev_Env\Lib\site-packages\django\bin\INABIE_TIC\PAE\archivos_excel', max_length=2000)

    def __str__(self):
        return self.nombre


"""El siguiente modelo sirve para conectarse la vista de sql server que nos permite consultar los datos relaciones a una entrega de raciones: centros educativos, oferentes, etc"""

class ConsultaEntregaRaciones(models.Model):
    periodo_escolar_desde_cont = models.IntegerField("Periodo Escolar (desde)")
    periodo_escolar_hasta_cont = models.IntegerField("Periodo Escolar (hasta)")
    #datos del centro educativo

    codigo_ce = models.CharField("Código CE", max_length=5, primary_key=True)
    nombre_ce = models.CharField("Nombre CE", max_length=255, null=True, blank=True)
    provincia_ce = models.CharField("Provincia CE", max_length=255)
    municipio_ce = models.CharField("Provincia CE", max_length=255)
    regional_ce = models.CharField("Regional CE", max_length=2, null=True, blank=True)
    distrito_ce = models.CharField("Distrito CE", max_length=4, null=True, blank=True)
    sector_ce = models.CharField("Sector CE", max_length=255, null=True, blank=True)
    direccion_ce = models.CharField("Dirección CE", max_length=255, null=True, blank=True)
    telefono_ce = models.CharField("Teléfono CE", max_length=14, null=True, blank=True)
    modalidad_ce = models.CharField("Servicio CE", max_length=255, null=True, blank=True)
    tanda_ce = models.CharField("Tanda CE", max_length=150)
    lote_raciones_diarias_total_ltd = models.IntegerField("Matricula Tanda", null=True, blank=True)

    #datos del proveedor

    cedula_rnc_cont = models.CharField("Cédula Proveedor", max_length=11) #es proveedor en vez de oferente
    nombre_prov = models.CharField("Nombre Proveedor", max_length=255, null=True, blank=True)
    telefono_prov = models.CharField("Teléfono Proveedor", max_length=14, null=True, blank=True)
    email_prov = models.EmailField("Email Proveedor", max_length=254, null=True, blank=True)

    #datos de la entrega de raciones

    producto_alimento_lth = models.CharField("Tipo Producto/Alimentos", max_length=255)
    


    def __str__(self):
        return self.codigo_ce

    class Meta:
        managed = False
        db_table = 'lotificacion_centro_proveedor'

"""Nuevo modelo de para la lotificacion de centros escolares"""

class Lotificacion(models.Model):
    lote_id = models.AutoField("Lote id", primary_key=True)
    lote_header_id = models.IntegerField("Lote header id")
    proceso_no = models.CharField("Numero proceso", max_length=30)
    lote_no = models.CharField("Numero de lote", max_length=50)
    centro_codigo = models.ForeignKey("PAE.Escuela", verbose_name="Escuela", on_delete=models.CASCADE, db_column="centro_codigo")
    raciones_diarias_estudiantes = models.IntegerField("Raciones diarias estudiantes", null=True, blank=True)
    raciones_diarias_administrativo = models.IntegerField("Raciones diarias administrativo", null=True, blank=True)
    raciones_diarias_total = models.IntegerField("Raciones diarias total", null=True, blank=True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank=True)
    creado_fecha_hora = models.DateTimeField("Creado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank=True)
    actualizado_fecha_hora = models.DateTimeField("Actualizado Fecha/Hora", auto_now=False, auto_now_add=False, null=True, blank=True)
    estado_id = models.IntegerField("Estado: activo/inactivo")
    class Meta:
        managed = False
        db_table = 'PAE_lotificacion'
        unique_together = ['proceso_no', 'lote_no', 'centro_codigo']

class Proceso(models.Model):
    proceso_id = models.IntegerField("Id proceso")
    proceso_no = models.CharField("Numero proceso", max_length=30, primary_key=True)
    descripcion = models.TextField("Descripcion", null=True, blank= True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank= True)
    creado_fecha_hora = models.DateTimeField("Fecha/Hora creado", auto_now=False, auto_now_add=False, null=True, blank= True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank= True)
    actualizado_fecha_hora = models.DateTimeField("Fecha/Hora actualizado", auto_now=False, auto_now_add=False, null=True, blank= True)
    estado_id = models.IntegerField("Estado Activo/Inactivo", null=True, blank= True)

    class Meta:
        managed = False
        db_table = 'PAE_proceso'


class LoteHeader(models.Model):

    lote_header_id = models.IntegerField("Lote header id")
    proceso_no = models.ForeignKey("PAE.Proceso", verbose_name="Numero Proceso", on_delete=models.CASCADE, primary_key=True, unique=True, db_column="proceso_no")
    proceso = models.CharField("Proceso", max_length=500, null=True, blank= True)
    lote_descripcion = models.CharField("Lote descripcion", max_length=500, null=True, blank= True)
    creado_por = models.CharField("Creado por", max_length=100, null=True, blank= True)
    creado_fecha_hora = models.DateTimeField("Fecha/Hora creado", auto_now=False, auto_now_add=False, null=True, blank= True)
    actualizado_por = models.CharField("Actualizado por", max_length=100, null=True, blank= True)
    actualizado_fecha_hora = models.DateTimeField("Fecha/Hora actualizado", auto_now=False, auto_now_add=False, null=True, blank= True)
    estado_id = models.IntegerField("Estado Activo/Inactivo", null=True, blank= True)

    class Meta:
        managed = False
        db_table = 'PAE_lote_header'
