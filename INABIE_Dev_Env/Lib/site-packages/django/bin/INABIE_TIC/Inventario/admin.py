
from django.contrib import admin
from .models import ArchivosExcelEquipo, Equipo, MarcaDeEquipo, TipoDeEquipo, Empleado, CargoEmpleado, Departamento
from django.http import HttpResponse
import openpyxl
from django.contrib.messages import constants as messages
import datetime

@admin.action(description='Descargar seleccionados como archivo de excel')
def descargarExcelEquipos(modeladmin, request, queryset):
    hojaExcel = openpyxl.Workbook()

    # pk_id_equipos = []

    # equipos = Equipo.objects.select_related('marca__tipo__nombrePersonaAsignada').values()

    # for equipo in equipos:
    #     pk_id_equipos.append(equipo['pk_id'])   
        


    for equipo in queryset:
        fila = []
        for propiedadesEquipo in vars(equipo).items(): #para obtener primera fila, es decir, nombre de las columnas
            fila.append(propiedadesEquipo[0])
        
        fila.pop(0)
        hojaExcel.active.append(fila)   
        break

    for equipo in queryset.values():
        fila = []

        equipoObtenido = Equipo.objects.select_related('marca', 'tipo', 'nombrePersonaAsignada', 'cargoPersonaAsignada', 'departamentoAsignado').get(pk_id = equipo['pk_id'])

        pk_id= equipoObtenido.pk_id
        fechaRegistro = equipoObtenido.fechaRegistro
        serial = equipoObtenido.serial
        numeroTelefono = equipoObtenido.numeroTelefono
        estado = equipoObtenido.estado
        tipo = equipoObtenido.tipo.nombre if equipoObtenido.tipo else ''
        marca = equipoObtenido.marca.nombre if equipoObtenido.marca else ''
        modelo = equipoObtenido.modelo
        placaInabie = equipoObtenido.placaInabie
        placaBienesNacionales = equipoObtenido.placaBienesNacionales
        nombrePersonaAsignada = equipoObtenido.nombrePersonaAsignada.nombre if equipoObtenido.nombrePersonaAsignada else ''
        cargoPersonaAsignada = equipoObtenido.cargoPersonaAsignada.nombre if equipoObtenido.cargoPersonaAsignada else ''
        departamentoAsignado = equipoObtenido.departamentoAsignado.nombre if equipoObtenido.departamentoAsignado else ''
        prestado = equipoObtenido.prestado
        fechaSolicitud = equipoObtenido.fechaSolicitud
        fechaEntrega = equipoObtenido.fechaEntrega
        fechaDevolucion = equipoObtenido.fechaDevolucion
        devueltoPor = equipoObtenido.devueltoPor
        comentario = equipoObtenido.comentario
        ubicacion = equipoObtenido.ubicacion

        valores = [pk_id, fechaRegistro, serial, numeroTelefono, estado, tipo, marca, modelo, 
        placaInabie, placaBienesNacionales, nombrePersonaAsignada, cargoPersonaAsignada, departamentoAsignado,
        prestado, fechaSolicitud, fechaEntrega, fechaDevolucion, devueltoPor, comentario, ubicacion]

        for valorPropiedad in valores:
            # print(valorPropiedad)


            if type(valorPropiedad) is datetime.datetime:
                fila.append(valorPropiedad.strftime("%m/%d/%Y, %H:%M:%S"))
            else:
                fila.append(valorPropiedad)
            
                
        hojaExcel.active.append(fila)

    fechaYHoraActual = datetime.datetime.now().strftime("%m-%d-%Y_%H-%M-%S")

    hojaExcel.save(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Equipos_Data_Importada/inabie_equipos_{fechaYHoraActual}.xlsx')

    excelEquipos = open(f'C:/Users/opdbd07/Desktop/INABIE_APPS_01/INABIE_Dev_Env/Lib/site-packages/django/bin/INABIE_TIC/Equipos_Data_Importada/inabie_equipos_{fechaYHoraActual}.xlsx', 'rb')
    
    response = HttpResponse(excelEquipos, headers= {
        'Content-Type': 'application/vnd.ms-excel',
        'Content-Disposition': 'attachment; filename="inabie_equipos_{fechaYHoraActual}.xlsx"'.format(fechaYHoraActual = fechaYHoraActual)
    })

    return response

def obtenerValoresRegistro(queryset, propiedad):
    valores = []
    for registro in queryset:
        valores.append(getattr(registro, propiedad))
    return valores


@admin.action(description='Agregar registros de equipos con el archivo de excel seleccionado')
def agregarRegistrosEquipos(modeladmin, request, queryset):
    
    if(len(queryset) > 1):
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.ERROR, message="No puedes cargar registros de mas de un archivo de excel.")
    else:

        archivo = openpyxl.load_workbook(str(queryset[0].archivo), read_only=True)

        

        """Registros de la base de datos para saber cuales no se han agregado en el bucle que le sigue"""

        serialesEquipos = obtenerValoresRegistro(Equipo.objects.all(), 'serial')
        tiposDeEquipos = obtenerValoresRegistro(TipoDeEquipo.objects.all(), 'nombre')
        marcasDeEquipo = obtenerValoresRegistro(MarcaDeEquipo.objects.all(), 'nombre')
        nombresPersonaAsignada = obtenerValoresRegistro(Empleado.objects.all(), 'nombre')
        cargosPersonaAsignada = obtenerValoresRegistro(CargoEmpleado.objects.all(), 'nombre')
        departamentosAsignado = obtenerValoresRegistro(Departamento.objects.all(), 'nombre')
        

        for fila in archivo.active.values:

            """Conversion de tipos para asegurarnos que trabajamos con los tipos adecuados de cada modelo"""

            tipo_str = ''
            marca_str = ''
            modelo_str = ''
            serial_str = ''
            placaInabie_str = ''
            placaBienesNacionales_str = ''
            numeroTelefono_str = ''
            nombrePersonaAsignada_str = ''
            devueltoPor_str = ''
            estado_str = ''
            cargoPersonaAsignada_str = ''
            departamentoAsignado_str = ''
            fechaSolicitud_date = datetime.datetime(2022, 1, 5)
            fechaEntrega_date = datetime.datetime(2022, 1, 6)
            fechaDevolucion_date = datetime.datetime(2022, 1, 7)
            comentario_str = ''
            ubicacion_str = ''
            prestado_bool = False

            if fila[0] is not None: 
                tipo_str = (str(fila[0]).upper()[:251] + '...') if len(str(fila[0])) >= 255 else str(fila[0]).upper() #para evitar que no supere los 255 caracteres                                                                     
            if fila[1] is not None: 
                marca_str = (str(fila[1]).upper()[:251] + '...') if len(str(fila[1])) >= 255 else str(fila[1]).upper()
            if fila[2] is not None: 
                modelo_str = (str(fila[2]).upper()[:251] + '...') if len(str(fila[2])) >= 255 else str(fila[2]).upper()
            if fila[3] is not None: 
                serial_str = (str(fila[3]).upper()[:251] + '...') if len(str(fila[3])) >= 255 else str(fila[3]).upper()
            if fila[4] is not None: 
                placaInabie_str = (str(fila[4]).upper()[:251] + '...') if len(str(fila[4])) >= 255 else str(fila[4]).upper() 
            if fila[5] is not None: 
                placaBienesNacionales_str = (str(fila[5]).upper()[:251] + '...') if len(str(fila[5])) >= 255 else str(fila[5]).upper()
            if fila[6] is not None: 
                numeroTelefono_str = (str(fila[6]).upper()[:251] + '...') if len(str(fila[6])) >= 255 else str(fila[6]).upper()
            if fila[7] is not None: 
                nombrePersonaAsignada_str = (str(fila[7]).upper()[:251] + '...') if len(str(fila[7])) >= 255 else str(fila[7]).upper()
            if fila[8] is not None: 
                devueltoPor_str = (str(fila[8]).upper()[:251] + '...') if len(str(fila[8])) >= 255 else str(fila[8]).upper()
            if fila[9] is not None: 
                estado_str = (str(fila[9]).upper()[:251] + '...') if len(str(fila[9])) >= 255 else str(fila[9]).upper()
            if fila[10] is not None: 
                cargoPersonaAsignada_str = (str(fila[10]).upper()[:251] + '...') if len(str(fila[10])) >= 255 else str(fila[10]).upper()
            if fila[11] is not None: 
                departamentoAsignado_str = (str(fila[11]).upper()[:251] + '...') if len(str(fila[11])) >= 255 else str(fila[11]).upper()
            if fila[12] is not None: 
                fechaSolicitud_date = fila[12]
            if fila[13] is not None: 
                fechaEntrega_date = fila[13]
            if fila[14] is not None: 
                fechaDevolucion_date = fila[14]
            if fila[15] is not None: 
                comentario_str = str(fila[15])
            if fila[16] is not None: 
                ubicacion_str = str(fila[16])

            if fila[17] is not None: 
                prestado_bool = bool(fila[17])
            else:
                prestado_bool = False
            
            
            

            



            """Asegurandonos de que esten registrados los siguientes foreignkey, para evitar errores de agregado de equipos"""

            if tipo_str not in tiposDeEquipos:
                tipoEquipo = TipoDeEquipo(nombre = tipo_str)

                tipoEquipo.save(force_insert= True)
                tiposDeEquipos.append(tipo_str)

            if marca_str not in marcasDeEquipo:
                marcaEquipo = MarcaDeEquipo(nombre = marca_str)

                marcaEquipo.save(force_insert= True)
                marcasDeEquipo.append(marca_str)

            if nombrePersonaAsignada_str not in nombresPersonaAsignada:
                nombre_persona_asignada = Empleado(nombre = nombrePersonaAsignada_str)

                nombre_persona_asignada.save(force_insert= True)
                nombresPersonaAsignada.append(nombrePersonaAsignada_str)

            if cargoPersonaAsignada_str not in cargosPersonaAsignada:
                cargo_persona_asignada = CargoEmpleado(nombre = cargoPersonaAsignada_str)

                cargo_persona_asignada.save(force_insert= True)
                cargosPersonaAsignada.append(cargoPersonaAsignada_str)

            if departamentoAsignado_str not in departamentosAsignado:
                departamento_asignado = Departamento(nombre = departamentoAsignado_str)

                departamento_asignado.save(force_insert= True)
                departamentosAsignado.append(departamentoAsignado_str)


            nuevoRegistro = Equipo(
                serial = serial_str,
                numeroTelefono = numeroTelefono_str,
                estado = estado_str,
                tipo = TipoDeEquipo.objects.filter(nombre = tipo_str).first(),
                marca = MarcaDeEquipo.objects.filter(nombre = marca_str).first(),
                modelo = modelo_str,
                placaInabie = placaInabie_str,
                placaBienesNacionales = placaBienesNacionales_str,
                nombrePersonaAsignada = Empleado.objects.filter(nombre = nombrePersonaAsignada_str).first(),
                cargoPersonaAsignada = CargoEmpleado.objects.filter(nombre = cargoPersonaAsignada_str).first(),
                departamentoAsignado = Departamento.objects.filter(nombre = departamentoAsignado_str).first(),
                prestado = prestado_bool, 
                fechaSolicitud = fechaSolicitud_date,
                fechaEntrega = fechaEntrega_date,
                fechaDevolucion = fechaDevolucion_date,
                devueltoPor = devueltoPor_str,
                comentario = comentario_str,
                ubicacion = ubicacion_str
            )

            nuevoRegistro.save(force_insert= True)

        
        
        admin.ModelAdmin.message_user(request=request, self=modeladmin, level= messages.SUCCESS, message="Datos cargados exitosamente.")

        return



class AdminEquipo(admin.ModelAdmin):
    list_display = ('serial', 'nombrePersonaAsignada', 'departamentoAsignado', 'prestado', 'estado', 'tipo', 'marca', 'numeroTelefono', 'modelo', 'placaInabie', 'placaBienesNacionales')
    list_filter = ('prestado', 'departamentoAsignado', 'marca', 'tipo', 'estado', 'fechaRegistro', 'fechaEntrega', 'fechaDevolucion')
    date_hierarchy = 'fechaEntrega'
    search_fields = ('serial', 'nombrePersonaAsignada__nombre', 'departamentoAsignado__nombre', 'prestado', 'estado', 'tipo__nombre', 'marca__nombre', 'numeroTelefono', 'modelo', 'placaInabie', 'placaBienesNacionales')
    autocomplete_fields = ('nombrePersonaAsignada', 'cargoPersonaAsignada', 'departamentoAsignado', 'tipo', 'marca')
    actions = [descargarExcelEquipos]

class EmpleadoAdmin(admin.ModelAdmin):
    search_fields = ('nombre', )

class CargoEmpleadoAdmin(admin.ModelAdmin):
    search_fields = ('nombre', )

class TipoDeEquipoAdmin(admin.ModelAdmin):
    search_fields = ('nombre', )

class MarcaDeEquipoAdmin(admin.ModelAdmin):
    search_fields = ('nombre', )

class ArchivosExcelEquipoAdmin(admin.ModelAdmin):

    list_display = ('nombre', 'fecha', 'archivo')
    search_fields = ('nombre', 'fecha')
    actions = [agregarRegistrosEquipos]

class DepartamentoAsignadoAdmin(admin.ModelAdmin):
    campos = [f.name for f in Departamento._meta.fields]
    list_display = tuple(campos)
    search_fields = ('nombre', )


admin.site.register(Equipo, AdminEquipo)
admin.site.register(MarcaDeEquipo, MarcaDeEquipoAdmin)
admin.site.register(TipoDeEquipo, TipoDeEquipoAdmin)
admin.site.register(Empleado, EmpleadoAdmin)
admin.site.register(CargoEmpleado, CargoEmpleadoAdmin)
admin.site.register(Departamento, DepartamentoAsignadoAdmin)
admin.site.register(ArchivosExcelEquipo, ArchivosExcelEquipoAdmin)



# Register your models here.
